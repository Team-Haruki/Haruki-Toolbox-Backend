// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"context"
	"errors"
	"fmt"
	"haruki-suite/utils/database/postgresql/predicate"
	"haruki-suite/utils/database/postgresql/socialplatforminfo"
	"haruki-suite/utils/database/postgresql/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SocialPlatformInfoUpdate is the builder for updating SocialPlatformInfo entities.
type SocialPlatformInfoUpdate struct {
	config
	hooks    []Hook
	mutation *SocialPlatformInfoMutation
}

// Where appends a list predicates to the SocialPlatformInfoUpdate builder.
func (_u *SocialPlatformInfoUpdate) Where(ps ...predicate.SocialPlatformInfo) *SocialPlatformInfoUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *SocialPlatformInfoUpdate) SetPlatform(v string) *SocialPlatformInfoUpdate {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *SocialPlatformInfoUpdate) SetNillablePlatform(v *string) *SocialPlatformInfoUpdate {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetPlatformUserID sets the "platform_user_id" field.
func (_u *SocialPlatformInfoUpdate) SetPlatformUserID(v string) *SocialPlatformInfoUpdate {
	_u.mutation.SetPlatformUserID(v)
	return _u
}

// SetNillablePlatformUserID sets the "platform_user_id" field if the given value is not nil.
func (_u *SocialPlatformInfoUpdate) SetNillablePlatformUserID(v *string) *SocialPlatformInfoUpdate {
	if v != nil {
		_u.SetPlatformUserID(*v)
	}
	return _u
}

// SetVerified sets the "verified" field.
func (_u *SocialPlatformInfoUpdate) SetVerified(v bool) *SocialPlatformInfoUpdate {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *SocialPlatformInfoUpdate) SetNillableVerified(v *bool) *SocialPlatformInfoUpdate {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// SetUserSocialPlatformInfo sets the "user_social_platform_info" field.
func (_u *SocialPlatformInfoUpdate) SetUserSocialPlatformInfo(v string) *SocialPlatformInfoUpdate {
	_u.mutation.SetUserSocialPlatformInfo(v)
	return _u
}

// SetNillableUserSocialPlatformInfo sets the "user_social_platform_info" field if the given value is not nil.
func (_u *SocialPlatformInfoUpdate) SetNillableUserSocialPlatformInfo(v *string) *SocialPlatformInfoUpdate {
	if v != nil {
		_u.SetUserSocialPlatformInfo(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *SocialPlatformInfoUpdate) SetUserID(id string) *SocialPlatformInfoUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *SocialPlatformInfoUpdate) SetUser(v *User) *SocialPlatformInfoUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the SocialPlatformInfoMutation object of the builder.
func (_u *SocialPlatformInfoUpdate) Mutation() *SocialPlatformInfoMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *SocialPlatformInfoUpdate) ClearUser() *SocialPlatformInfoUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SocialPlatformInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SocialPlatformInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SocialPlatformInfoUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SocialPlatformInfoUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SocialPlatformInfoUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`postgresql: clearing a required unique edge "SocialPlatformInfo.user"`)
	}
	return nil
}

func (_u *SocialPlatformInfoUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(socialplatforminfo.Table, socialplatforminfo.Columns, sqlgraph.NewFieldSpec(socialplatforminfo.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(socialplatforminfo.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.PlatformUserID(); ok {
		_spec.SetField(socialplatforminfo.FieldPlatformUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(socialplatforminfo.FieldVerified, field.TypeBool, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   socialplatforminfo.UserTable,
			Columns: []string{socialplatforminfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   socialplatforminfo.UserTable,
			Columns: []string{socialplatforminfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{socialplatforminfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SocialPlatformInfoUpdateOne is the builder for updating a single SocialPlatformInfo entity.
type SocialPlatformInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SocialPlatformInfoMutation
}

// SetPlatform sets the "platform" field.
func (_u *SocialPlatformInfoUpdateOne) SetPlatform(v string) *SocialPlatformInfoUpdateOne {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *SocialPlatformInfoUpdateOne) SetNillablePlatform(v *string) *SocialPlatformInfoUpdateOne {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetPlatformUserID sets the "platform_user_id" field.
func (_u *SocialPlatformInfoUpdateOne) SetPlatformUserID(v string) *SocialPlatformInfoUpdateOne {
	_u.mutation.SetPlatformUserID(v)
	return _u
}

// SetNillablePlatformUserID sets the "platform_user_id" field if the given value is not nil.
func (_u *SocialPlatformInfoUpdateOne) SetNillablePlatformUserID(v *string) *SocialPlatformInfoUpdateOne {
	if v != nil {
		_u.SetPlatformUserID(*v)
	}
	return _u
}

// SetVerified sets the "verified" field.
func (_u *SocialPlatformInfoUpdateOne) SetVerified(v bool) *SocialPlatformInfoUpdateOne {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *SocialPlatformInfoUpdateOne) SetNillableVerified(v *bool) *SocialPlatformInfoUpdateOne {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// SetUserSocialPlatformInfo sets the "user_social_platform_info" field.
func (_u *SocialPlatformInfoUpdateOne) SetUserSocialPlatformInfo(v string) *SocialPlatformInfoUpdateOne {
	_u.mutation.SetUserSocialPlatformInfo(v)
	return _u
}

// SetNillableUserSocialPlatformInfo sets the "user_social_platform_info" field if the given value is not nil.
func (_u *SocialPlatformInfoUpdateOne) SetNillableUserSocialPlatformInfo(v *string) *SocialPlatformInfoUpdateOne {
	if v != nil {
		_u.SetUserSocialPlatformInfo(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *SocialPlatformInfoUpdateOne) SetUserID(id string) *SocialPlatformInfoUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *SocialPlatformInfoUpdateOne) SetUser(v *User) *SocialPlatformInfoUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the SocialPlatformInfoMutation object of the builder.
func (_u *SocialPlatformInfoUpdateOne) Mutation() *SocialPlatformInfoMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *SocialPlatformInfoUpdateOne) ClearUser() *SocialPlatformInfoUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the SocialPlatformInfoUpdate builder.
func (_u *SocialPlatformInfoUpdateOne) Where(ps ...predicate.SocialPlatformInfo) *SocialPlatformInfoUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SocialPlatformInfoUpdateOne) Select(field string, fields ...string) *SocialPlatformInfoUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SocialPlatformInfo entity.
func (_u *SocialPlatformInfoUpdateOne) Save(ctx context.Context) (*SocialPlatformInfo, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SocialPlatformInfoUpdateOne) SaveX(ctx context.Context) *SocialPlatformInfo {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SocialPlatformInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SocialPlatformInfoUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SocialPlatformInfoUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`postgresql: clearing a required unique edge "SocialPlatformInfo.user"`)
	}
	return nil
}

func (_u *SocialPlatformInfoUpdateOne) sqlSave(ctx context.Context) (_node *SocialPlatformInfo, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(socialplatforminfo.Table, socialplatforminfo.Columns, sqlgraph.NewFieldSpec(socialplatforminfo.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`postgresql: missing "SocialPlatformInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, socialplatforminfo.FieldID)
		for _, f := range fields {
			if !socialplatforminfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("postgresql: invalid field %q for query", f)}
			}
			if f != socialplatforminfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(socialplatforminfo.FieldPlatform, field.TypeString, value)
	}
	if value, ok := _u.mutation.PlatformUserID(); ok {
		_spec.SetField(socialplatforminfo.FieldPlatformUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(socialplatforminfo.FieldVerified, field.TypeBool, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   socialplatforminfo.UserTable,
			Columns: []string{socialplatforminfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   socialplatforminfo.UserTable,
			Columns: []string{socialplatforminfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SocialPlatformInfo{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{socialplatforminfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
