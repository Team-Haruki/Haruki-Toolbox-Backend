// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"encoding/json"
	"fmt"
	"haruki-suite/ent/schema"
	"haruki-suite/utils/database/postgresql/gameaccountbinding"
	"haruki-suite/utils/database/postgresql/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GameAccountBinding is the model entity for the GameAccountBinding schema.
type GameAccountBinding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// jp | en | tw | kr | cn
	Server string `json:"server,omitempty"`
	// GameUserID holds the value of the "game_user_id" field.
	GameUserID string `json:"game_user_id,omitempty"`
	// Verified holds the value of the "verified" field.
	Verified bool `json:"verified,omitempty"`
	// Suite holds the value of the "suite" field.
	Suite *schema.SuiteDataPrivacySettings `json:"suite,omitempty"`
	// Mysekai holds the value of the "mysekai" field.
	Mysekai *schema.MysekaiDataPrivacySettings `json:"mysekai,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameAccountBindingQuery when eager-loading is set.
	Edges                      GameAccountBindingEdges `json:"edges"`
	user_game_account_bindings *string
	selectValues               sql.SelectValues
}

// GameAccountBindingEdges holds the relations/edges for other nodes in the graph.
type GameAccountBindingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameAccountBindingEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameAccountBinding) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gameaccountbinding.FieldSuite, gameaccountbinding.FieldMysekai:
			values[i] = new([]byte)
		case gameaccountbinding.FieldVerified:
			values[i] = new(sql.NullBool)
		case gameaccountbinding.FieldID:
			values[i] = new(sql.NullInt64)
		case gameaccountbinding.FieldServer, gameaccountbinding.FieldGameUserID:
			values[i] = new(sql.NullString)
		case gameaccountbinding.ForeignKeys[0]: // user_game_account_bindings
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameAccountBinding fields.
func (_m *GameAccountBinding) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gameaccountbinding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case gameaccountbinding.FieldServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server", values[i])
			} else if value.Valid {
				_m.Server = value.String
			}
		case gameaccountbinding.FieldGameUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game_user_id", values[i])
			} else if value.Valid {
				_m.GameUserID = value.String
			}
		case gameaccountbinding.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				_m.Verified = value.Bool
			}
		case gameaccountbinding.FieldSuite:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field suite", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Suite); err != nil {
					return fmt.Errorf("unmarshal field suite: %w", err)
				}
			}
		case gameaccountbinding.FieldMysekai:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mysekai", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Mysekai); err != nil {
					return fmt.Errorf("unmarshal field mysekai: %w", err)
				}
			}
		case gameaccountbinding.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_game_account_bindings", values[i])
			} else if value.Valid {
				_m.user_game_account_bindings = new(string)
				*_m.user_game_account_bindings = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameAccountBinding.
// This includes values selected through modifiers, order, etc.
func (_m *GameAccountBinding) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the GameAccountBinding entity.
func (_m *GameAccountBinding) QueryUser() *UserQuery {
	return NewGameAccountBindingClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this GameAccountBinding.
// Note that you need to call GameAccountBinding.Unwrap() before calling this method if this GameAccountBinding
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *GameAccountBinding) Update() *GameAccountBindingUpdateOne {
	return NewGameAccountBindingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the GameAccountBinding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *GameAccountBinding) Unwrap() *GameAccountBinding {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("postgresql: GameAccountBinding is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *GameAccountBinding) String() string {
	var builder strings.Builder
	builder.WriteString("GameAccountBinding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("server=")
	builder.WriteString(_m.Server)
	builder.WriteString(", ")
	builder.WriteString("game_user_id=")
	builder.WriteString(_m.GameUserID)
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", _m.Verified))
	builder.WriteString(", ")
	builder.WriteString("suite=")
	builder.WriteString(fmt.Sprintf("%v", _m.Suite))
	builder.WriteString(", ")
	builder.WriteString("mysekai=")
	builder.WriteString(fmt.Sprintf("%v", _m.Mysekai))
	builder.WriteByte(')')
	return builder.String()
}

// GameAccountBindings is a parsable slice of GameAccountBinding.
type GameAccountBindings []*GameAccountBinding
