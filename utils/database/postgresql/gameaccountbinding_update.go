// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"context"
	"errors"
	"fmt"
	"haruki-suite/ent/schema"
	"haruki-suite/utils/database/postgresql/gameaccountbinding"
	"haruki-suite/utils/database/postgresql/predicate"
	"haruki-suite/utils/database/postgresql/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GameAccountBindingUpdate is the builder for updating GameAccountBinding entities.
type GameAccountBindingUpdate struct {
	config
	hooks    []Hook
	mutation *GameAccountBindingMutation
}

// Where appends a list predicates to the GameAccountBindingUpdate builder.
func (_u *GameAccountBindingUpdate) Where(ps ...predicate.GameAccountBinding) *GameAccountBindingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetServer sets the "server" field.
func (_u *GameAccountBindingUpdate) SetServer(v string) *GameAccountBindingUpdate {
	_u.mutation.SetServer(v)
	return _u
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (_u *GameAccountBindingUpdate) SetNillableServer(v *string) *GameAccountBindingUpdate {
	if v != nil {
		_u.SetServer(*v)
	}
	return _u
}

// SetGameUserID sets the "game_user_id" field.
func (_u *GameAccountBindingUpdate) SetGameUserID(v int) *GameAccountBindingUpdate {
	_u.mutation.ResetGameUserID()
	_u.mutation.SetGameUserID(v)
	return _u
}

// SetNillableGameUserID sets the "game_user_id" field if the given value is not nil.
func (_u *GameAccountBindingUpdate) SetNillableGameUserID(v *int) *GameAccountBindingUpdate {
	if v != nil {
		_u.SetGameUserID(*v)
	}
	return _u
}

// AddGameUserID adds value to the "game_user_id" field.
func (_u *GameAccountBindingUpdate) AddGameUserID(v int) *GameAccountBindingUpdate {
	_u.mutation.AddGameUserID(v)
	return _u
}

// SetVerified sets the "verified" field.
func (_u *GameAccountBindingUpdate) SetVerified(v bool) *GameAccountBindingUpdate {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *GameAccountBindingUpdate) SetNillableVerified(v *bool) *GameAccountBindingUpdate {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// SetSuite sets the "suite" field.
func (_u *GameAccountBindingUpdate) SetSuite(v *schema.SuiteDataPrivacySettings) *GameAccountBindingUpdate {
	_u.mutation.SetSuite(v)
	return _u
}

// ClearSuite clears the value of the "suite" field.
func (_u *GameAccountBindingUpdate) ClearSuite() *GameAccountBindingUpdate {
	_u.mutation.ClearSuite()
	return _u
}

// SetMysekai sets the "mysekai" field.
func (_u *GameAccountBindingUpdate) SetMysekai(v *schema.MysekaiDataPrivacySettings) *GameAccountBindingUpdate {
	_u.mutation.SetMysekai(v)
	return _u
}

// ClearMysekai clears the value of the "mysekai" field.
func (_u *GameAccountBindingUpdate) ClearMysekai() *GameAccountBindingUpdate {
	_u.mutation.ClearMysekai()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *GameAccountBindingUpdate) SetUserID(id string) *GameAccountBindingUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *GameAccountBindingUpdate) SetNillableUserID(id *string) *GameAccountBindingUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *GameAccountBindingUpdate) SetUser(v *User) *GameAccountBindingUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the GameAccountBindingMutation object of the builder.
func (_u *GameAccountBindingUpdate) Mutation() *GameAccountBindingMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *GameAccountBindingUpdate) ClearUser() *GameAccountBindingUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GameAccountBindingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GameAccountBindingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GameAccountBindingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GameAccountBindingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *GameAccountBindingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gameaccountbinding.Table, gameaccountbinding.Columns, sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Server(); ok {
		_spec.SetField(gameaccountbinding.FieldServer, field.TypeString, value)
	}
	if value, ok := _u.mutation.GameUserID(); ok {
		_spec.SetField(gameaccountbinding.FieldGameUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGameUserID(); ok {
		_spec.AddField(gameaccountbinding.FieldGameUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(gameaccountbinding.FieldVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Suite(); ok {
		_spec.SetField(gameaccountbinding.FieldSuite, field.TypeJSON, value)
	}
	if _u.mutation.SuiteCleared() {
		_spec.ClearField(gameaccountbinding.FieldSuite, field.TypeJSON)
	}
	if value, ok := _u.mutation.Mysekai(); ok {
		_spec.SetField(gameaccountbinding.FieldMysekai, field.TypeJSON, value)
	}
	if _u.mutation.MysekaiCleared() {
		_spec.ClearField(gameaccountbinding.FieldMysekai, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccountbinding.UserTable,
			Columns: []string{gameaccountbinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccountbinding.UserTable,
			Columns: []string{gameaccountbinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameaccountbinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GameAccountBindingUpdateOne is the builder for updating a single GameAccountBinding entity.
type GameAccountBindingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameAccountBindingMutation
}

// SetServer sets the "server" field.
func (_u *GameAccountBindingUpdateOne) SetServer(v string) *GameAccountBindingUpdateOne {
	_u.mutation.SetServer(v)
	return _u
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (_u *GameAccountBindingUpdateOne) SetNillableServer(v *string) *GameAccountBindingUpdateOne {
	if v != nil {
		_u.SetServer(*v)
	}
	return _u
}

// SetGameUserID sets the "game_user_id" field.
func (_u *GameAccountBindingUpdateOne) SetGameUserID(v int) *GameAccountBindingUpdateOne {
	_u.mutation.ResetGameUserID()
	_u.mutation.SetGameUserID(v)
	return _u
}

// SetNillableGameUserID sets the "game_user_id" field if the given value is not nil.
func (_u *GameAccountBindingUpdateOne) SetNillableGameUserID(v *int) *GameAccountBindingUpdateOne {
	if v != nil {
		_u.SetGameUserID(*v)
	}
	return _u
}

// AddGameUserID adds value to the "game_user_id" field.
func (_u *GameAccountBindingUpdateOne) AddGameUserID(v int) *GameAccountBindingUpdateOne {
	_u.mutation.AddGameUserID(v)
	return _u
}

// SetVerified sets the "verified" field.
func (_u *GameAccountBindingUpdateOne) SetVerified(v bool) *GameAccountBindingUpdateOne {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *GameAccountBindingUpdateOne) SetNillableVerified(v *bool) *GameAccountBindingUpdateOne {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// SetSuite sets the "suite" field.
func (_u *GameAccountBindingUpdateOne) SetSuite(v *schema.SuiteDataPrivacySettings) *GameAccountBindingUpdateOne {
	_u.mutation.SetSuite(v)
	return _u
}

// ClearSuite clears the value of the "suite" field.
func (_u *GameAccountBindingUpdateOne) ClearSuite() *GameAccountBindingUpdateOne {
	_u.mutation.ClearSuite()
	return _u
}

// SetMysekai sets the "mysekai" field.
func (_u *GameAccountBindingUpdateOne) SetMysekai(v *schema.MysekaiDataPrivacySettings) *GameAccountBindingUpdateOne {
	_u.mutation.SetMysekai(v)
	return _u
}

// ClearMysekai clears the value of the "mysekai" field.
func (_u *GameAccountBindingUpdateOne) ClearMysekai() *GameAccountBindingUpdateOne {
	_u.mutation.ClearMysekai()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *GameAccountBindingUpdateOne) SetUserID(id string) *GameAccountBindingUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *GameAccountBindingUpdateOne) SetNillableUserID(id *string) *GameAccountBindingUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *GameAccountBindingUpdateOne) SetUser(v *User) *GameAccountBindingUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the GameAccountBindingMutation object of the builder.
func (_u *GameAccountBindingUpdateOne) Mutation() *GameAccountBindingMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *GameAccountBindingUpdateOne) ClearUser() *GameAccountBindingUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the GameAccountBindingUpdate builder.
func (_u *GameAccountBindingUpdateOne) Where(ps ...predicate.GameAccountBinding) *GameAccountBindingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GameAccountBindingUpdateOne) Select(field string, fields ...string) *GameAccountBindingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GameAccountBinding entity.
func (_u *GameAccountBindingUpdateOne) Save(ctx context.Context) (*GameAccountBinding, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GameAccountBindingUpdateOne) SaveX(ctx context.Context) *GameAccountBinding {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GameAccountBindingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GameAccountBindingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *GameAccountBindingUpdateOne) sqlSave(ctx context.Context) (_node *GameAccountBinding, err error) {
	_spec := sqlgraph.NewUpdateSpec(gameaccountbinding.Table, gameaccountbinding.Columns, sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`postgresql: missing "GameAccountBinding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameaccountbinding.FieldID)
		for _, f := range fields {
			if !gameaccountbinding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("postgresql: invalid field %q for query", f)}
			}
			if f != gameaccountbinding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Server(); ok {
		_spec.SetField(gameaccountbinding.FieldServer, field.TypeString, value)
	}
	if value, ok := _u.mutation.GameUserID(); ok {
		_spec.SetField(gameaccountbinding.FieldGameUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGameUserID(); ok {
		_spec.AddField(gameaccountbinding.FieldGameUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(gameaccountbinding.FieldVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Suite(); ok {
		_spec.SetField(gameaccountbinding.FieldSuite, field.TypeJSON, value)
	}
	if _u.mutation.SuiteCleared() {
		_spec.ClearField(gameaccountbinding.FieldSuite, field.TypeJSON)
	}
	if value, ok := _u.mutation.Mysekai(); ok {
		_spec.SetField(gameaccountbinding.FieldMysekai, field.TypeJSON, value)
	}
	if _u.mutation.MysekaiCleared() {
		_spec.ClearField(gameaccountbinding.FieldMysekai, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccountbinding.UserTable,
			Columns: []string{gameaccountbinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccountbinding.UserTable,
			Columns: []string{gameaccountbinding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameAccountBinding{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameaccountbinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
