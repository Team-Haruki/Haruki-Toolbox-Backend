// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"haruki-suite/utils/database/postgresql/migrate"

	"haruki-suite/utils/database/postgresql/authorizesocialplatforminfo"
	"haruki-suite/utils/database/postgresql/emailinfo"
	"haruki-suite/utils/database/postgresql/gameaccountbinding"
	"haruki-suite/utils/database/postgresql/socialplatforminfo"
	"haruki-suite/utils/database/postgresql/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuthorizeSocialPlatformInfo is the client for interacting with the AuthorizeSocialPlatformInfo builders.
	AuthorizeSocialPlatformInfo *AuthorizeSocialPlatformInfoClient
	// EmailInfo is the client for interacting with the EmailInfo builders.
	EmailInfo *EmailInfoClient
	// GameAccountBinding is the client for interacting with the GameAccountBinding builders.
	GameAccountBinding *GameAccountBindingClient
	// SocialPlatformInfo is the client for interacting with the SocialPlatformInfo builders.
	SocialPlatformInfo *SocialPlatformInfoClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuthorizeSocialPlatformInfo = NewAuthorizeSocialPlatformInfoClient(c.config)
	c.EmailInfo = NewEmailInfoClient(c.config)
	c.GameAccountBinding = NewGameAccountBindingClient(c.config)
	c.SocialPlatformInfo = NewSocialPlatformInfoClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("postgresql: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("postgresql: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                         ctx,
		config:                      cfg,
		AuthorizeSocialPlatformInfo: NewAuthorizeSocialPlatformInfoClient(cfg),
		EmailInfo:                   NewEmailInfoClient(cfg),
		GameAccountBinding:          NewGameAccountBindingClient(cfg),
		SocialPlatformInfo:          NewSocialPlatformInfoClient(cfg),
		User:                        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                         ctx,
		config:                      cfg,
		AuthorizeSocialPlatformInfo: NewAuthorizeSocialPlatformInfoClient(cfg),
		EmailInfo:                   NewEmailInfoClient(cfg),
		GameAccountBinding:          NewGameAccountBindingClient(cfg),
		SocialPlatformInfo:          NewSocialPlatformInfoClient(cfg),
		User:                        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuthorizeSocialPlatformInfo.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AuthorizeSocialPlatformInfo.Use(hooks...)
	c.EmailInfo.Use(hooks...)
	c.GameAccountBinding.Use(hooks...)
	c.SocialPlatformInfo.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.AuthorizeSocialPlatformInfo.Intercept(interceptors...)
	c.EmailInfo.Intercept(interceptors...)
	c.GameAccountBinding.Intercept(interceptors...)
	c.SocialPlatformInfo.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthorizeSocialPlatformInfoMutation:
		return c.AuthorizeSocialPlatformInfo.mutate(ctx, m)
	case *EmailInfoMutation:
		return c.EmailInfo.mutate(ctx, m)
	case *GameAccountBindingMutation:
		return c.GameAccountBinding.mutate(ctx, m)
	case *SocialPlatformInfoMutation:
		return c.SocialPlatformInfo.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("postgresql: unknown mutation type %T", m)
	}
}

// AuthorizeSocialPlatformInfoClient is a client for the AuthorizeSocialPlatformInfo schema.
type AuthorizeSocialPlatformInfoClient struct {
	config
}

// NewAuthorizeSocialPlatformInfoClient returns a client for the AuthorizeSocialPlatformInfo from the given config.
func NewAuthorizeSocialPlatformInfoClient(c config) *AuthorizeSocialPlatformInfoClient {
	return &AuthorizeSocialPlatformInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authorizesocialplatforminfo.Hooks(f(g(h())))`.
func (c *AuthorizeSocialPlatformInfoClient) Use(hooks ...Hook) {
	c.hooks.AuthorizeSocialPlatformInfo = append(c.hooks.AuthorizeSocialPlatformInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authorizesocialplatforminfo.Intercept(f(g(h())))`.
func (c *AuthorizeSocialPlatformInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthorizeSocialPlatformInfo = append(c.inters.AuthorizeSocialPlatformInfo, interceptors...)
}

// Create returns a builder for creating a AuthorizeSocialPlatformInfo entity.
func (c *AuthorizeSocialPlatformInfoClient) Create() *AuthorizeSocialPlatformInfoCreate {
	mutation := newAuthorizeSocialPlatformInfoMutation(c.config, OpCreate)
	return &AuthorizeSocialPlatformInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthorizeSocialPlatformInfo entities.
func (c *AuthorizeSocialPlatformInfoClient) CreateBulk(builders ...*AuthorizeSocialPlatformInfoCreate) *AuthorizeSocialPlatformInfoCreateBulk {
	return &AuthorizeSocialPlatformInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthorizeSocialPlatformInfoClient) MapCreateBulk(slice any, setFunc func(*AuthorizeSocialPlatformInfoCreate, int)) *AuthorizeSocialPlatformInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthorizeSocialPlatformInfoCreateBulk{err: fmt.Errorf("calling to AuthorizeSocialPlatformInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthorizeSocialPlatformInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthorizeSocialPlatformInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthorizeSocialPlatformInfo.
func (c *AuthorizeSocialPlatformInfoClient) Update() *AuthorizeSocialPlatformInfoUpdate {
	mutation := newAuthorizeSocialPlatformInfoMutation(c.config, OpUpdate)
	return &AuthorizeSocialPlatformInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthorizeSocialPlatformInfoClient) UpdateOne(_m *AuthorizeSocialPlatformInfo) *AuthorizeSocialPlatformInfoUpdateOne {
	mutation := newAuthorizeSocialPlatformInfoMutation(c.config, OpUpdateOne, withAuthorizeSocialPlatformInfo(_m))
	return &AuthorizeSocialPlatformInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthorizeSocialPlatformInfoClient) UpdateOneID(id int) *AuthorizeSocialPlatformInfoUpdateOne {
	mutation := newAuthorizeSocialPlatformInfoMutation(c.config, OpUpdateOne, withAuthorizeSocialPlatformInfoID(id))
	return &AuthorizeSocialPlatformInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthorizeSocialPlatformInfo.
func (c *AuthorizeSocialPlatformInfoClient) Delete() *AuthorizeSocialPlatformInfoDelete {
	mutation := newAuthorizeSocialPlatformInfoMutation(c.config, OpDelete)
	return &AuthorizeSocialPlatformInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthorizeSocialPlatformInfoClient) DeleteOne(_m *AuthorizeSocialPlatformInfo) *AuthorizeSocialPlatformInfoDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthorizeSocialPlatformInfoClient) DeleteOneID(id int) *AuthorizeSocialPlatformInfoDeleteOne {
	builder := c.Delete().Where(authorizesocialplatforminfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthorizeSocialPlatformInfoDeleteOne{builder}
}

// Query returns a query builder for AuthorizeSocialPlatformInfo.
func (c *AuthorizeSocialPlatformInfoClient) Query() *AuthorizeSocialPlatformInfoQuery {
	return &AuthorizeSocialPlatformInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthorizeSocialPlatformInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthorizeSocialPlatformInfo entity by its id.
func (c *AuthorizeSocialPlatformInfoClient) Get(ctx context.Context, id int) (*AuthorizeSocialPlatformInfo, error) {
	return c.Query().Where(authorizesocialplatforminfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthorizeSocialPlatformInfoClient) GetX(ctx context.Context, id int) *AuthorizeSocialPlatformInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AuthorizeSocialPlatformInfo.
func (c *AuthorizeSocialPlatformInfoClient) QueryUser(_m *AuthorizeSocialPlatformInfo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authorizesocialplatforminfo.Table, authorizesocialplatforminfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, authorizesocialplatforminfo.UserTable, authorizesocialplatforminfo.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthorizeSocialPlatformInfoClient) Hooks() []Hook {
	return c.hooks.AuthorizeSocialPlatformInfo
}

// Interceptors returns the client interceptors.
func (c *AuthorizeSocialPlatformInfoClient) Interceptors() []Interceptor {
	return c.inters.AuthorizeSocialPlatformInfo
}

func (c *AuthorizeSocialPlatformInfoClient) mutate(ctx context.Context, m *AuthorizeSocialPlatformInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthorizeSocialPlatformInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthorizeSocialPlatformInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthorizeSocialPlatformInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthorizeSocialPlatformInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("postgresql: unknown AuthorizeSocialPlatformInfo mutation op: %q", m.Op())
	}
}

// EmailInfoClient is a client for the EmailInfo schema.
type EmailInfoClient struct {
	config
}

// NewEmailInfoClient returns a client for the EmailInfo from the given config.
func NewEmailInfoClient(c config) *EmailInfoClient {
	return &EmailInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailinfo.Hooks(f(g(h())))`.
func (c *EmailInfoClient) Use(hooks ...Hook) {
	c.hooks.EmailInfo = append(c.hooks.EmailInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailinfo.Intercept(f(g(h())))`.
func (c *EmailInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailInfo = append(c.inters.EmailInfo, interceptors...)
}

// Create returns a builder for creating a EmailInfo entity.
func (c *EmailInfoClient) Create() *EmailInfoCreate {
	mutation := newEmailInfoMutation(c.config, OpCreate)
	return &EmailInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailInfo entities.
func (c *EmailInfoClient) CreateBulk(builders ...*EmailInfoCreate) *EmailInfoCreateBulk {
	return &EmailInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailInfoClient) MapCreateBulk(slice any, setFunc func(*EmailInfoCreate, int)) *EmailInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailInfoCreateBulk{err: fmt.Errorf("calling to EmailInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailInfo.
func (c *EmailInfoClient) Update() *EmailInfoUpdate {
	mutation := newEmailInfoMutation(c.config, OpUpdate)
	return &EmailInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailInfoClient) UpdateOne(_m *EmailInfo) *EmailInfoUpdateOne {
	mutation := newEmailInfoMutation(c.config, OpUpdateOne, withEmailInfo(_m))
	return &EmailInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailInfoClient) UpdateOneID(id int) *EmailInfoUpdateOne {
	mutation := newEmailInfoMutation(c.config, OpUpdateOne, withEmailInfoID(id))
	return &EmailInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailInfo.
func (c *EmailInfoClient) Delete() *EmailInfoDelete {
	mutation := newEmailInfoMutation(c.config, OpDelete)
	return &EmailInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailInfoClient) DeleteOne(_m *EmailInfo) *EmailInfoDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailInfoClient) DeleteOneID(id int) *EmailInfoDeleteOne {
	builder := c.Delete().Where(emailinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailInfoDeleteOne{builder}
}

// Query returns a query builder for EmailInfo.
func (c *EmailInfoClient) Query() *EmailInfoQuery {
	return &EmailInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailInfo entity by its id.
func (c *EmailInfoClient) Get(ctx context.Context, id int) (*EmailInfo, error) {
	return c.Query().Where(emailinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailInfoClient) GetX(ctx context.Context, id int) *EmailInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a EmailInfo.
func (c *EmailInfoClient) QueryUser(_m *EmailInfo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailinfo.Table, emailinfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, emailinfo.UserTable, emailinfo.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailInfoClient) Hooks() []Hook {
	return c.hooks.EmailInfo
}

// Interceptors returns the client interceptors.
func (c *EmailInfoClient) Interceptors() []Interceptor {
	return c.inters.EmailInfo
}

func (c *EmailInfoClient) mutate(ctx context.Context, m *EmailInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("postgresql: unknown EmailInfo mutation op: %q", m.Op())
	}
}

// GameAccountBindingClient is a client for the GameAccountBinding schema.
type GameAccountBindingClient struct {
	config
}

// NewGameAccountBindingClient returns a client for the GameAccountBinding from the given config.
func NewGameAccountBindingClient(c config) *GameAccountBindingClient {
	return &GameAccountBindingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gameaccountbinding.Hooks(f(g(h())))`.
func (c *GameAccountBindingClient) Use(hooks ...Hook) {
	c.hooks.GameAccountBinding = append(c.hooks.GameAccountBinding, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gameaccountbinding.Intercept(f(g(h())))`.
func (c *GameAccountBindingClient) Intercept(interceptors ...Interceptor) {
	c.inters.GameAccountBinding = append(c.inters.GameAccountBinding, interceptors...)
}

// Create returns a builder for creating a GameAccountBinding entity.
func (c *GameAccountBindingClient) Create() *GameAccountBindingCreate {
	mutation := newGameAccountBindingMutation(c.config, OpCreate)
	return &GameAccountBindingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GameAccountBinding entities.
func (c *GameAccountBindingClient) CreateBulk(builders ...*GameAccountBindingCreate) *GameAccountBindingCreateBulk {
	return &GameAccountBindingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GameAccountBindingClient) MapCreateBulk(slice any, setFunc func(*GameAccountBindingCreate, int)) *GameAccountBindingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GameAccountBindingCreateBulk{err: fmt.Errorf("calling to GameAccountBindingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GameAccountBindingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GameAccountBindingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GameAccountBinding.
func (c *GameAccountBindingClient) Update() *GameAccountBindingUpdate {
	mutation := newGameAccountBindingMutation(c.config, OpUpdate)
	return &GameAccountBindingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameAccountBindingClient) UpdateOne(_m *GameAccountBinding) *GameAccountBindingUpdateOne {
	mutation := newGameAccountBindingMutation(c.config, OpUpdateOne, withGameAccountBinding(_m))
	return &GameAccountBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameAccountBindingClient) UpdateOneID(id int) *GameAccountBindingUpdateOne {
	mutation := newGameAccountBindingMutation(c.config, OpUpdateOne, withGameAccountBindingID(id))
	return &GameAccountBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GameAccountBinding.
func (c *GameAccountBindingClient) Delete() *GameAccountBindingDelete {
	mutation := newGameAccountBindingMutation(c.config, OpDelete)
	return &GameAccountBindingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GameAccountBindingClient) DeleteOne(_m *GameAccountBinding) *GameAccountBindingDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GameAccountBindingClient) DeleteOneID(id int) *GameAccountBindingDeleteOne {
	builder := c.Delete().Where(gameaccountbinding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameAccountBindingDeleteOne{builder}
}

// Query returns a query builder for GameAccountBinding.
func (c *GameAccountBindingClient) Query() *GameAccountBindingQuery {
	return &GameAccountBindingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGameAccountBinding},
		inters: c.Interceptors(),
	}
}

// Get returns a GameAccountBinding entity by its id.
func (c *GameAccountBindingClient) Get(ctx context.Context, id int) (*GameAccountBinding, error) {
	return c.Query().Where(gameaccountbinding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameAccountBindingClient) GetX(ctx context.Context, id int) *GameAccountBinding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a GameAccountBinding.
func (c *GameAccountBindingClient) QueryUser(_m *GameAccountBinding) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameaccountbinding.Table, gameaccountbinding.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameaccountbinding.UserTable, gameaccountbinding.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameAccountBindingClient) Hooks() []Hook {
	return c.hooks.GameAccountBinding
}

// Interceptors returns the client interceptors.
func (c *GameAccountBindingClient) Interceptors() []Interceptor {
	return c.inters.GameAccountBinding
}

func (c *GameAccountBindingClient) mutate(ctx context.Context, m *GameAccountBindingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GameAccountBindingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GameAccountBindingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GameAccountBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GameAccountBindingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("postgresql: unknown GameAccountBinding mutation op: %q", m.Op())
	}
}

// SocialPlatformInfoClient is a client for the SocialPlatformInfo schema.
type SocialPlatformInfoClient struct {
	config
}

// NewSocialPlatformInfoClient returns a client for the SocialPlatformInfo from the given config.
func NewSocialPlatformInfoClient(c config) *SocialPlatformInfoClient {
	return &SocialPlatformInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `socialplatforminfo.Hooks(f(g(h())))`.
func (c *SocialPlatformInfoClient) Use(hooks ...Hook) {
	c.hooks.SocialPlatformInfo = append(c.hooks.SocialPlatformInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `socialplatforminfo.Intercept(f(g(h())))`.
func (c *SocialPlatformInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.SocialPlatformInfo = append(c.inters.SocialPlatformInfo, interceptors...)
}

// Create returns a builder for creating a SocialPlatformInfo entity.
func (c *SocialPlatformInfoClient) Create() *SocialPlatformInfoCreate {
	mutation := newSocialPlatformInfoMutation(c.config, OpCreate)
	return &SocialPlatformInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SocialPlatformInfo entities.
func (c *SocialPlatformInfoClient) CreateBulk(builders ...*SocialPlatformInfoCreate) *SocialPlatformInfoCreateBulk {
	return &SocialPlatformInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SocialPlatformInfoClient) MapCreateBulk(slice any, setFunc func(*SocialPlatformInfoCreate, int)) *SocialPlatformInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SocialPlatformInfoCreateBulk{err: fmt.Errorf("calling to SocialPlatformInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SocialPlatformInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SocialPlatformInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SocialPlatformInfo.
func (c *SocialPlatformInfoClient) Update() *SocialPlatformInfoUpdate {
	mutation := newSocialPlatformInfoMutation(c.config, OpUpdate)
	return &SocialPlatformInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SocialPlatformInfoClient) UpdateOne(_m *SocialPlatformInfo) *SocialPlatformInfoUpdateOne {
	mutation := newSocialPlatformInfoMutation(c.config, OpUpdateOne, withSocialPlatformInfo(_m))
	return &SocialPlatformInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SocialPlatformInfoClient) UpdateOneID(id int) *SocialPlatformInfoUpdateOne {
	mutation := newSocialPlatformInfoMutation(c.config, OpUpdateOne, withSocialPlatformInfoID(id))
	return &SocialPlatformInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SocialPlatformInfo.
func (c *SocialPlatformInfoClient) Delete() *SocialPlatformInfoDelete {
	mutation := newSocialPlatformInfoMutation(c.config, OpDelete)
	return &SocialPlatformInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SocialPlatformInfoClient) DeleteOne(_m *SocialPlatformInfo) *SocialPlatformInfoDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SocialPlatformInfoClient) DeleteOneID(id int) *SocialPlatformInfoDeleteOne {
	builder := c.Delete().Where(socialplatforminfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SocialPlatformInfoDeleteOne{builder}
}

// Query returns a query builder for SocialPlatformInfo.
func (c *SocialPlatformInfoClient) Query() *SocialPlatformInfoQuery {
	return &SocialPlatformInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSocialPlatformInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a SocialPlatformInfo entity by its id.
func (c *SocialPlatformInfoClient) Get(ctx context.Context, id int) (*SocialPlatformInfo, error) {
	return c.Query().Where(socialplatforminfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SocialPlatformInfoClient) GetX(ctx context.Context, id int) *SocialPlatformInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a SocialPlatformInfo.
func (c *SocialPlatformInfoClient) QueryUser(_m *SocialPlatformInfo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialplatforminfo.Table, socialplatforminfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, socialplatforminfo.UserTable, socialplatforminfo.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SocialPlatformInfoClient) Hooks() []Hook {
	return c.hooks.SocialPlatformInfo
}

// Interceptors returns the client interceptors.
func (c *SocialPlatformInfoClient) Interceptors() []Interceptor {
	return c.inters.SocialPlatformInfo
}

func (c *SocialPlatformInfoClient) mutate(ctx context.Context, m *SocialPlatformInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SocialPlatformInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SocialPlatformInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SocialPlatformInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SocialPlatformInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("postgresql: unknown SocialPlatformInfo mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmailInfo queries the email_info edge of a User.
func (c *UserClient) QueryEmailInfo(_m *User) *EmailInfoQuery {
	query := (&EmailInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(emailinfo.Table, emailinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.EmailInfoTable, user.EmailInfoColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySocialPlatformInfo queries the social_platform_info edge of a User.
func (c *UserClient) QuerySocialPlatformInfo(_m *User) *SocialPlatformInfoQuery {
	query := (&SocialPlatformInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(socialplatforminfo.Table, socialplatforminfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SocialPlatformInfoTable, user.SocialPlatformInfoColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthorizedSocialPlatforms queries the authorized_social_platforms edge of a User.
func (c *UserClient) QueryAuthorizedSocialPlatforms(_m *User) *AuthorizeSocialPlatformInfoQuery {
	query := (&AuthorizeSocialPlatformInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(authorizesocialplatforminfo.Table, authorizesocialplatforminfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuthorizedSocialPlatformsTable, user.AuthorizedSocialPlatformsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGameAccountBindings queries the game_account_bindings edge of a User.
func (c *UserClient) QueryGameAccountBindings(_m *User) *GameAccountBindingQuery {
	query := (&GameAccountBindingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(gameaccountbinding.Table, gameaccountbinding.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GameAccountBindingsTable, user.GameAccountBindingsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("postgresql: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AuthorizeSocialPlatformInfo, EmailInfo, GameAccountBinding, SocialPlatformInfo,
		User []ent.Hook
	}
	inters struct {
		AuthorizeSocialPlatformInfo, EmailInfo, GameAccountBinding, SocialPlatformInfo,
		User []ent.Interceptor
	}
)
