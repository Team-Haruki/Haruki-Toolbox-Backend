// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"fmt"
	"haruki-suite/utils/database/postgresql/emailinfo"
	"haruki-suite/utils/database/postgresql/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmailInfo is the model entity for the EmailInfo schema.
type EmailInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Verified holds the value of the "verified" field.
	Verified bool `json:"verified,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailInfoQuery when eager-loading is set.
	Edges           EmailInfoEdges `json:"edges"`
	user_email_info *string
	selectValues    sql.SelectValues
}

// EmailInfoEdges holds the relations/edges for other nodes in the graph.
type EmailInfoEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailInfoEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailinfo.FieldVerified:
			values[i] = new(sql.NullBool)
		case emailinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case emailinfo.FieldEmail:
			values[i] = new(sql.NullString)
		case emailinfo.ForeignKeys[0]: // user_email_info
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailInfo fields.
func (_m *EmailInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case emailinfo.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case emailinfo.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				_m.Verified = value.Bool
			}
		case emailinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_email_info", values[i])
			} else if value.Valid {
				_m.user_email_info = new(string)
				*_m.user_email_info = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailInfo.
// This includes values selected through modifiers, order, etc.
func (_m *EmailInfo) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the EmailInfo entity.
func (_m *EmailInfo) QueryUser() *UserQuery {
	return NewEmailInfoClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this EmailInfo.
// Note that you need to call EmailInfo.Unwrap() before calling this method if this EmailInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *EmailInfo) Update() *EmailInfoUpdateOne {
	return NewEmailInfoClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the EmailInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *EmailInfo) Unwrap() *EmailInfo {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("postgresql: EmailInfo is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *EmailInfo) String() string {
	var builder strings.Builder
	builder.WriteString("EmailInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", _m.Verified))
	builder.WriteByte(')')
	return builder.String()
}

// EmailInfos is a parsable slice of EmailInfo.
type EmailInfos []*EmailInfo
