// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"context"
	"errors"
	"fmt"
	"haruki-suite/utils/database/postgresql/authorizesocialplatforminfo"
	"haruki-suite/utils/database/postgresql/emailinfo"
	"haruki-suite/utils/database/postgresql/gameaccountbinding"
	"haruki-suite/utils/database/postgresql/predicate"
	"haruki-suite/utils/database/postgresql/socialplatforminfo"
	"haruki-suite/utils/database/postgresql/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPasswordHash sets the "password_hash" field.
func (_u *UserUpdate) SetPasswordHash(v string) *UserUpdate {
	_u.mutation.SetPasswordHash(v)
	return _u
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePasswordHash(v *string) *UserUpdate {
	if v != nil {
		_u.SetPasswordHash(*v)
	}
	return _u
}

// SetAvatarPath sets the "avatar_path" field.
func (_u *UserUpdate) SetAvatarPath(v string) *UserUpdate {
	_u.mutation.SetAvatarPath(v)
	return _u
}

// SetNillableAvatarPath sets the "avatar_path" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAvatarPath(v *string) *UserUpdate {
	if v != nil {
		_u.SetAvatarPath(*v)
	}
	return _u
}

// ClearAvatarPath clears the value of the "avatar_path" field.
func (_u *UserUpdate) ClearAvatarPath() *UserUpdate {
	_u.mutation.ClearAvatarPath()
	return _u
}

// SetEmailInfoID sets the "email_info" edge to the EmailInfo entity by ID.
func (_u *UserUpdate) SetEmailInfoID(id int) *UserUpdate {
	_u.mutation.SetEmailInfoID(id)
	return _u
}

// SetNillableEmailInfoID sets the "email_info" edge to the EmailInfo entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableEmailInfoID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetEmailInfoID(*id)
	}
	return _u
}

// SetEmailInfo sets the "email_info" edge to the EmailInfo entity.
func (_u *UserUpdate) SetEmailInfo(v *EmailInfo) *UserUpdate {
	return _u.SetEmailInfoID(v.ID)
}

// SetSocialPlatformInfoID sets the "social_platform_info" edge to the SocialPlatformInfo entity by ID.
func (_u *UserUpdate) SetSocialPlatformInfoID(id int) *UserUpdate {
	_u.mutation.SetSocialPlatformInfoID(id)
	return _u
}

// SetNillableSocialPlatformInfoID sets the "social_platform_info" edge to the SocialPlatformInfo entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableSocialPlatformInfoID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetSocialPlatformInfoID(*id)
	}
	return _u
}

// SetSocialPlatformInfo sets the "social_platform_info" edge to the SocialPlatformInfo entity.
func (_u *UserUpdate) SetSocialPlatformInfo(v *SocialPlatformInfo) *UserUpdate {
	return _u.SetSocialPlatformInfoID(v.ID)
}

// AddAuthorizedSocialPlatformIDs adds the "authorized_social_platforms" edge to the AuthorizeSocialPlatformInfo entity by IDs.
func (_u *UserUpdate) AddAuthorizedSocialPlatformIDs(ids ...int) *UserUpdate {
	_u.mutation.AddAuthorizedSocialPlatformIDs(ids...)
	return _u
}

// AddAuthorizedSocialPlatforms adds the "authorized_social_platforms" edges to the AuthorizeSocialPlatformInfo entity.
func (_u *UserUpdate) AddAuthorizedSocialPlatforms(v ...*AuthorizeSocialPlatformInfo) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAuthorizedSocialPlatformIDs(ids...)
}

// AddGameAccountBindingIDs adds the "game_account_bindings" edge to the GameAccountBinding entity by IDs.
func (_u *UserUpdate) AddGameAccountBindingIDs(ids ...int) *UserUpdate {
	_u.mutation.AddGameAccountBindingIDs(ids...)
	return _u
}

// AddGameAccountBindings adds the "game_account_bindings" edges to the GameAccountBinding entity.
func (_u *UserUpdate) AddGameAccountBindings(v ...*GameAccountBinding) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGameAccountBindingIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearEmailInfo clears the "email_info" edge to the EmailInfo entity.
func (_u *UserUpdate) ClearEmailInfo() *UserUpdate {
	_u.mutation.ClearEmailInfo()
	return _u
}

// ClearSocialPlatformInfo clears the "social_platform_info" edge to the SocialPlatformInfo entity.
func (_u *UserUpdate) ClearSocialPlatformInfo() *UserUpdate {
	_u.mutation.ClearSocialPlatformInfo()
	return _u
}

// ClearAuthorizedSocialPlatforms clears all "authorized_social_platforms" edges to the AuthorizeSocialPlatformInfo entity.
func (_u *UserUpdate) ClearAuthorizedSocialPlatforms() *UserUpdate {
	_u.mutation.ClearAuthorizedSocialPlatforms()
	return _u
}

// RemoveAuthorizedSocialPlatformIDs removes the "authorized_social_platforms" edge to AuthorizeSocialPlatformInfo entities by IDs.
func (_u *UserUpdate) RemoveAuthorizedSocialPlatformIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveAuthorizedSocialPlatformIDs(ids...)
	return _u
}

// RemoveAuthorizedSocialPlatforms removes "authorized_social_platforms" edges to AuthorizeSocialPlatformInfo entities.
func (_u *UserUpdate) RemoveAuthorizedSocialPlatforms(v ...*AuthorizeSocialPlatformInfo) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAuthorizedSocialPlatformIDs(ids...)
}

// ClearGameAccountBindings clears all "game_account_bindings" edges to the GameAccountBinding entity.
func (_u *UserUpdate) ClearGameAccountBindings() *UserUpdate {
	_u.mutation.ClearGameAccountBindings()
	return _u
}

// RemoveGameAccountBindingIDs removes the "game_account_bindings" edge to GameAccountBinding entities by IDs.
func (_u *UserUpdate) RemoveGameAccountBindingIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveGameAccountBindingIDs(ids...)
	return _u
}

// RemoveGameAccountBindings removes "game_account_bindings" edges to GameAccountBinding entities.
func (_u *UserUpdate) RemoveGameAccountBindings(v ...*GameAccountBinding) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGameAccountBindingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.AvatarPath(); ok {
		_spec.SetField(user.FieldAvatarPath, field.TypeString, value)
	}
	if _u.mutation.AvatarPathCleared() {
		_spec.ClearField(user.FieldAvatarPath, field.TypeString)
	}
	if _u.mutation.EmailInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmailInfoTable,
			Columns: []string{user.EmailInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmailInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmailInfoTable,
			Columns: []string{user.EmailInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SocialPlatformInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SocialPlatformInfoTable,
			Columns: []string{user.SocialPlatformInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(socialplatforminfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SocialPlatformInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SocialPlatformInfoTable,
			Columns: []string{user.SocialPlatformInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(socialplatforminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AuthorizedSocialPlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthorizedSocialPlatformsTable,
			Columns: []string{user.AuthorizedSocialPlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizesocialplatforminfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAuthorizedSocialPlatformsIDs(); len(nodes) > 0 && !_u.mutation.AuthorizedSocialPlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthorizedSocialPlatformsTable,
			Columns: []string{user.AuthorizedSocialPlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizesocialplatforminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorizedSocialPlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthorizedSocialPlatformsTable,
			Columns: []string{user.AuthorizedSocialPlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizesocialplatforminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GameAccountBindingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GameAccountBindingsTable,
			Columns: []string{user.GameAccountBindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGameAccountBindingsIDs(); len(nodes) > 0 && !_u.mutation.GameAccountBindingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GameAccountBindingsTable,
			Columns: []string{user.GameAccountBindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GameAccountBindingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GameAccountBindingsTable,
			Columns: []string{user.GameAccountBindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPasswordHash sets the "password_hash" field.
func (_u *UserUpdateOne) SetPasswordHash(v string) *UserUpdateOne {
	_u.mutation.SetPasswordHash(v)
	return _u
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePasswordHash(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPasswordHash(*v)
	}
	return _u
}

// SetAvatarPath sets the "avatar_path" field.
func (_u *UserUpdateOne) SetAvatarPath(v string) *UserUpdateOne {
	_u.mutation.SetAvatarPath(v)
	return _u
}

// SetNillableAvatarPath sets the "avatar_path" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAvatarPath(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAvatarPath(*v)
	}
	return _u
}

// ClearAvatarPath clears the value of the "avatar_path" field.
func (_u *UserUpdateOne) ClearAvatarPath() *UserUpdateOne {
	_u.mutation.ClearAvatarPath()
	return _u
}

// SetEmailInfoID sets the "email_info" edge to the EmailInfo entity by ID.
func (_u *UserUpdateOne) SetEmailInfoID(id int) *UserUpdateOne {
	_u.mutation.SetEmailInfoID(id)
	return _u
}

// SetNillableEmailInfoID sets the "email_info" edge to the EmailInfo entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmailInfoID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetEmailInfoID(*id)
	}
	return _u
}

// SetEmailInfo sets the "email_info" edge to the EmailInfo entity.
func (_u *UserUpdateOne) SetEmailInfo(v *EmailInfo) *UserUpdateOne {
	return _u.SetEmailInfoID(v.ID)
}

// SetSocialPlatformInfoID sets the "social_platform_info" edge to the SocialPlatformInfo entity by ID.
func (_u *UserUpdateOne) SetSocialPlatformInfoID(id int) *UserUpdateOne {
	_u.mutation.SetSocialPlatformInfoID(id)
	return _u
}

// SetNillableSocialPlatformInfoID sets the "social_platform_info" edge to the SocialPlatformInfo entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableSocialPlatformInfoID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetSocialPlatformInfoID(*id)
	}
	return _u
}

// SetSocialPlatformInfo sets the "social_platform_info" edge to the SocialPlatformInfo entity.
func (_u *UserUpdateOne) SetSocialPlatformInfo(v *SocialPlatformInfo) *UserUpdateOne {
	return _u.SetSocialPlatformInfoID(v.ID)
}

// AddAuthorizedSocialPlatformIDs adds the "authorized_social_platforms" edge to the AuthorizeSocialPlatformInfo entity by IDs.
func (_u *UserUpdateOne) AddAuthorizedSocialPlatformIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddAuthorizedSocialPlatformIDs(ids...)
	return _u
}

// AddAuthorizedSocialPlatforms adds the "authorized_social_platforms" edges to the AuthorizeSocialPlatformInfo entity.
func (_u *UserUpdateOne) AddAuthorizedSocialPlatforms(v ...*AuthorizeSocialPlatformInfo) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAuthorizedSocialPlatformIDs(ids...)
}

// AddGameAccountBindingIDs adds the "game_account_bindings" edge to the GameAccountBinding entity by IDs.
func (_u *UserUpdateOne) AddGameAccountBindingIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddGameAccountBindingIDs(ids...)
	return _u
}

// AddGameAccountBindings adds the "game_account_bindings" edges to the GameAccountBinding entity.
func (_u *UserUpdateOne) AddGameAccountBindings(v ...*GameAccountBinding) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGameAccountBindingIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearEmailInfo clears the "email_info" edge to the EmailInfo entity.
func (_u *UserUpdateOne) ClearEmailInfo() *UserUpdateOne {
	_u.mutation.ClearEmailInfo()
	return _u
}

// ClearSocialPlatformInfo clears the "social_platform_info" edge to the SocialPlatformInfo entity.
func (_u *UserUpdateOne) ClearSocialPlatformInfo() *UserUpdateOne {
	_u.mutation.ClearSocialPlatformInfo()
	return _u
}

// ClearAuthorizedSocialPlatforms clears all "authorized_social_platforms" edges to the AuthorizeSocialPlatformInfo entity.
func (_u *UserUpdateOne) ClearAuthorizedSocialPlatforms() *UserUpdateOne {
	_u.mutation.ClearAuthorizedSocialPlatforms()
	return _u
}

// RemoveAuthorizedSocialPlatformIDs removes the "authorized_social_platforms" edge to AuthorizeSocialPlatformInfo entities by IDs.
func (_u *UserUpdateOne) RemoveAuthorizedSocialPlatformIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveAuthorizedSocialPlatformIDs(ids...)
	return _u
}

// RemoveAuthorizedSocialPlatforms removes "authorized_social_platforms" edges to AuthorizeSocialPlatformInfo entities.
func (_u *UserUpdateOne) RemoveAuthorizedSocialPlatforms(v ...*AuthorizeSocialPlatformInfo) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAuthorizedSocialPlatformIDs(ids...)
}

// ClearGameAccountBindings clears all "game_account_bindings" edges to the GameAccountBinding entity.
func (_u *UserUpdateOne) ClearGameAccountBindings() *UserUpdateOne {
	_u.mutation.ClearGameAccountBindings()
	return _u
}

// RemoveGameAccountBindingIDs removes the "game_account_bindings" edge to GameAccountBinding entities by IDs.
func (_u *UserUpdateOne) RemoveGameAccountBindingIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveGameAccountBindingIDs(ids...)
	return _u
}

// RemoveGameAccountBindings removes "game_account_bindings" edges to GameAccountBinding entities.
func (_u *UserUpdateOne) RemoveGameAccountBindings(v ...*GameAccountBinding) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGameAccountBindingIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`postgresql: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("postgresql: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.AvatarPath(); ok {
		_spec.SetField(user.FieldAvatarPath, field.TypeString, value)
	}
	if _u.mutation.AvatarPathCleared() {
		_spec.ClearField(user.FieldAvatarPath, field.TypeString)
	}
	if _u.mutation.EmailInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmailInfoTable,
			Columns: []string{user.EmailInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmailInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmailInfoTable,
			Columns: []string{user.EmailInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SocialPlatformInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SocialPlatformInfoTable,
			Columns: []string{user.SocialPlatformInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(socialplatforminfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SocialPlatformInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SocialPlatformInfoTable,
			Columns: []string{user.SocialPlatformInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(socialplatforminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AuthorizedSocialPlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthorizedSocialPlatformsTable,
			Columns: []string{user.AuthorizedSocialPlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizesocialplatforminfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAuthorizedSocialPlatformsIDs(); len(nodes) > 0 && !_u.mutation.AuthorizedSocialPlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthorizedSocialPlatformsTable,
			Columns: []string{user.AuthorizedSocialPlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizesocialplatforminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorizedSocialPlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthorizedSocialPlatformsTable,
			Columns: []string{user.AuthorizedSocialPlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizesocialplatforminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GameAccountBindingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GameAccountBindingsTable,
			Columns: []string{user.GameAccountBindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGameAccountBindingsIDs(); len(nodes) > 0 && !_u.mutation.GameAccountBindingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GameAccountBindingsTable,
			Columns: []string{user.GameAccountBindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GameAccountBindingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GameAccountBindingsTable,
			Columns: []string{user.GameAccountBindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
