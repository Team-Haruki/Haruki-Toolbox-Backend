// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"context"
	"errors"
	"fmt"
	"haruki-suite/utils/database/postgresql/socialplatforminfo"
	"haruki-suite/utils/database/postgresql/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SocialPlatformInfoCreate is the builder for creating a SocialPlatformInfo entity.
type SocialPlatformInfoCreate struct {
	config
	mutation *SocialPlatformInfoMutation
	hooks    []Hook
}

// SetPlatform sets the "platform" field.
func (_c *SocialPlatformInfoCreate) SetPlatform(v string) *SocialPlatformInfoCreate {
	_c.mutation.SetPlatform(v)
	return _c
}

// SetPlatformUserID sets the "platform_user_id" field.
func (_c *SocialPlatformInfoCreate) SetPlatformUserID(v string) *SocialPlatformInfoCreate {
	_c.mutation.SetPlatformUserID(v)
	return _c
}

// SetVerified sets the "verified" field.
func (_c *SocialPlatformInfoCreate) SetVerified(v bool) *SocialPlatformInfoCreate {
	_c.mutation.SetVerified(v)
	return _c
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_c *SocialPlatformInfoCreate) SetNillableVerified(v *bool) *SocialPlatformInfoCreate {
	if v != nil {
		_c.SetVerified(*v)
	}
	return _c
}

// SetUserSocialPlatformInfo sets the "user_social_platform_info" field.
func (_c *SocialPlatformInfoCreate) SetUserSocialPlatformInfo(v string) *SocialPlatformInfoCreate {
	_c.mutation.SetUserSocialPlatformInfo(v)
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *SocialPlatformInfoCreate) SetUserID(id string) *SocialPlatformInfoCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *SocialPlatformInfoCreate) SetUser(v *User) *SocialPlatformInfoCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the SocialPlatformInfoMutation object of the builder.
func (_c *SocialPlatformInfoCreate) Mutation() *SocialPlatformInfoMutation {
	return _c.mutation
}

// Save creates the SocialPlatformInfo in the database.
func (_c *SocialPlatformInfoCreate) Save(ctx context.Context) (*SocialPlatformInfo, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SocialPlatformInfoCreate) SaveX(ctx context.Context) *SocialPlatformInfo {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SocialPlatformInfoCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SocialPlatformInfoCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SocialPlatformInfoCreate) defaults() {
	if _, ok := _c.mutation.Verified(); !ok {
		v := socialplatforminfo.DefaultVerified
		_c.mutation.SetVerified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SocialPlatformInfoCreate) check() error {
	if _, ok := _c.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`postgresql: missing required field "SocialPlatformInfo.platform"`)}
	}
	if _, ok := _c.mutation.PlatformUserID(); !ok {
		return &ValidationError{Name: "platform_user_id", err: errors.New(`postgresql: missing required field "SocialPlatformInfo.platform_user_id"`)}
	}
	if _, ok := _c.mutation.Verified(); !ok {
		return &ValidationError{Name: "verified", err: errors.New(`postgresql: missing required field "SocialPlatformInfo.verified"`)}
	}
	if _, ok := _c.mutation.UserSocialPlatformInfo(); !ok {
		return &ValidationError{Name: "user_social_platform_info", err: errors.New(`postgresql: missing required field "SocialPlatformInfo.user_social_platform_info"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`postgresql: missing required edge "SocialPlatformInfo.user"`)}
	}
	return nil
}

func (_c *SocialPlatformInfoCreate) sqlSave(ctx context.Context) (*SocialPlatformInfo, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SocialPlatformInfoCreate) createSpec() (*SocialPlatformInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &SocialPlatformInfo{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(socialplatforminfo.Table, sqlgraph.NewFieldSpec(socialplatforminfo.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Platform(); ok {
		_spec.SetField(socialplatforminfo.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := _c.mutation.PlatformUserID(); ok {
		_spec.SetField(socialplatforminfo.FieldPlatformUserID, field.TypeString, value)
		_node.PlatformUserID = value
	}
	if value, ok := _c.mutation.Verified(); ok {
		_spec.SetField(socialplatforminfo.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   socialplatforminfo.UserTable,
			Columns: []string{socialplatforminfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserSocialPlatformInfo = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SocialPlatformInfoCreateBulk is the builder for creating many SocialPlatformInfo entities in bulk.
type SocialPlatformInfoCreateBulk struct {
	config
	err      error
	builders []*SocialPlatformInfoCreate
}

// Save creates the SocialPlatformInfo entities in the database.
func (_c *SocialPlatformInfoCreateBulk) Save(ctx context.Context) ([]*SocialPlatformInfo, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SocialPlatformInfo, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SocialPlatformInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SocialPlatformInfoCreateBulk) SaveX(ctx context.Context) []*SocialPlatformInfo {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SocialPlatformInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SocialPlatformInfoCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
