// Code generated by ent, DO NOT EDIT.

package gameaccountbinding

import (
	"haruki-suite/utils/database/postgresql/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldLTE(FieldID, id))
}

// Server applies equality check predicate on the "server" field. It's identical to ServerEQ.
func Server(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEQ(FieldServer, v))
}

// GameUserID applies equality check predicate on the "game_user_id" field. It's identical to GameUserIDEQ.
func GameUserID(v int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEQ(FieldGameUserID, v))
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEQ(FieldVerified, v))
}

// ServerEQ applies the EQ predicate on the "server" field.
func ServerEQ(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEQ(FieldServer, v))
}

// ServerNEQ applies the NEQ predicate on the "server" field.
func ServerNEQ(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNEQ(FieldServer, v))
}

// ServerIn applies the In predicate on the "server" field.
func ServerIn(vs ...string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldIn(FieldServer, vs...))
}

// ServerNotIn applies the NotIn predicate on the "server" field.
func ServerNotIn(vs ...string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNotIn(FieldServer, vs...))
}

// ServerGT applies the GT predicate on the "server" field.
func ServerGT(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldGT(FieldServer, v))
}

// ServerGTE applies the GTE predicate on the "server" field.
func ServerGTE(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldGTE(FieldServer, v))
}

// ServerLT applies the LT predicate on the "server" field.
func ServerLT(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldLT(FieldServer, v))
}

// ServerLTE applies the LTE predicate on the "server" field.
func ServerLTE(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldLTE(FieldServer, v))
}

// ServerContains applies the Contains predicate on the "server" field.
func ServerContains(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldContains(FieldServer, v))
}

// ServerHasPrefix applies the HasPrefix predicate on the "server" field.
func ServerHasPrefix(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldHasPrefix(FieldServer, v))
}

// ServerHasSuffix applies the HasSuffix predicate on the "server" field.
func ServerHasSuffix(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldHasSuffix(FieldServer, v))
}

// ServerEqualFold applies the EqualFold predicate on the "server" field.
func ServerEqualFold(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEqualFold(FieldServer, v))
}

// ServerContainsFold applies the ContainsFold predicate on the "server" field.
func ServerContainsFold(v string) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldContainsFold(FieldServer, v))
}

// GameUserIDEQ applies the EQ predicate on the "game_user_id" field.
func GameUserIDEQ(v int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEQ(FieldGameUserID, v))
}

// GameUserIDNEQ applies the NEQ predicate on the "game_user_id" field.
func GameUserIDNEQ(v int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNEQ(FieldGameUserID, v))
}

// GameUserIDIn applies the In predicate on the "game_user_id" field.
func GameUserIDIn(vs ...int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldIn(FieldGameUserID, vs...))
}

// GameUserIDNotIn applies the NotIn predicate on the "game_user_id" field.
func GameUserIDNotIn(vs ...int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNotIn(FieldGameUserID, vs...))
}

// GameUserIDGT applies the GT predicate on the "game_user_id" field.
func GameUserIDGT(v int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldGT(FieldGameUserID, v))
}

// GameUserIDGTE applies the GTE predicate on the "game_user_id" field.
func GameUserIDGTE(v int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldGTE(FieldGameUserID, v))
}

// GameUserIDLT applies the LT predicate on the "game_user_id" field.
func GameUserIDLT(v int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldLT(FieldGameUserID, v))
}

// GameUserIDLTE applies the LTE predicate on the "game_user_id" field.
func GameUserIDLTE(v int) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldLTE(FieldGameUserID, v))
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldEQ(FieldVerified, v))
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNEQ(FieldVerified, v))
}

// SuiteIsNil applies the IsNil predicate on the "suite" field.
func SuiteIsNil() predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldIsNull(FieldSuite))
}

// SuiteNotNil applies the NotNil predicate on the "suite" field.
func SuiteNotNil() predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNotNull(FieldSuite))
}

// MysekaiIsNil applies the IsNil predicate on the "mysekai" field.
func MysekaiIsNil() predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldIsNull(FieldMysekai))
}

// MysekaiNotNil applies the NotNil predicate on the "mysekai" field.
func MysekaiNotNil() predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.FieldNotNull(FieldMysekai))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.GameAccountBinding {
	return predicate.GameAccountBinding(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameAccountBinding) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameAccountBinding) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameAccountBinding) predicate.GameAccountBinding {
	return predicate.GameAccountBinding(sql.NotPredicates(p))
}
