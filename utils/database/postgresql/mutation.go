// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"context"
	"errors"
	"fmt"
	"haruki-suite/ent/schema"
	"haruki-suite/utils/database/postgresql/authorizesocialplatforminfo"
	"haruki-suite/utils/database/postgresql/emailinfo"
	"haruki-suite/utils/database/postgresql/gameaccountbinding"
	"haruki-suite/utils/database/postgresql/predicate"
	"haruki-suite/utils/database/postgresql/socialplatforminfo"
	"haruki-suite/utils/database/postgresql/user"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuthorizeSocialPlatformInfo = "AuthorizeSocialPlatformInfo"
	TypeEmailInfo                   = "EmailInfo"
	TypeGameAccountBinding          = "GameAccountBinding"
	TypeSocialPlatformInfo          = "SocialPlatformInfo"
	TypeUser                        = "User"
)

// AuthorizeSocialPlatformInfoMutation represents an operation that mutates the AuthorizeSocialPlatformInfo nodes in the graph.
type AuthorizeSocialPlatformInfoMutation struct {
	config
	op               Op
	typ              string
	id               *int
	platform         *string
	platform_user_id *string
	platform_id      *int
	addplatform_id   *int
	comment          *string
	clearedFields    map[string]struct{}
	user             *string
	cleareduser      bool
	done             bool
	oldValue         func(context.Context) (*AuthorizeSocialPlatformInfo, error)
	predicates       []predicate.AuthorizeSocialPlatformInfo
}

var _ ent.Mutation = (*AuthorizeSocialPlatformInfoMutation)(nil)

// authorizesocialplatforminfoOption allows management of the mutation configuration using functional options.
type authorizesocialplatforminfoOption func(*AuthorizeSocialPlatformInfoMutation)

// newAuthorizeSocialPlatformInfoMutation creates new mutation for the AuthorizeSocialPlatformInfo entity.
func newAuthorizeSocialPlatformInfoMutation(c config, op Op, opts ...authorizesocialplatforminfoOption) *AuthorizeSocialPlatformInfoMutation {
	m := &AuthorizeSocialPlatformInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthorizeSocialPlatformInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthorizeSocialPlatformInfoID sets the ID field of the mutation.
func withAuthorizeSocialPlatformInfoID(id int) authorizesocialplatforminfoOption {
	return func(m *AuthorizeSocialPlatformInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *AuthorizeSocialPlatformInfo
		)
		m.oldValue = func(ctx context.Context) (*AuthorizeSocialPlatformInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AuthorizeSocialPlatformInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthorizeSocialPlatformInfo sets the old AuthorizeSocialPlatformInfo of the mutation.
func withAuthorizeSocialPlatformInfo(node *AuthorizeSocialPlatformInfo) authorizesocialplatforminfoOption {
	return func(m *AuthorizeSocialPlatformInfoMutation) {
		m.oldValue = func(context.Context) (*AuthorizeSocialPlatformInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthorizeSocialPlatformInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthorizeSocialPlatformInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("postgresql: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthorizeSocialPlatformInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthorizeSocialPlatformInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AuthorizeSocialPlatformInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *AuthorizeSocialPlatformInfoMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AuthorizeSocialPlatformInfoMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AuthorizeSocialPlatformInfo entity.
// If the AuthorizeSocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeSocialPlatformInfoMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AuthorizeSocialPlatformInfoMutation) ResetUserID() {
	m.user = nil
}

// SetPlatform sets the "platform" field.
func (m *AuthorizeSocialPlatformInfoMutation) SetPlatform(s string) {
	m.platform = &s
}

// Platform returns the value of the "platform" field in the mutation.
func (m *AuthorizeSocialPlatformInfoMutation) Platform() (r string, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the AuthorizeSocialPlatformInfo entity.
// If the AuthorizeSocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeSocialPlatformInfoMutation) OldPlatform(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *AuthorizeSocialPlatformInfoMutation) ResetPlatform() {
	m.platform = nil
}

// SetPlatformUserID sets the "platform_user_id" field.
func (m *AuthorizeSocialPlatformInfoMutation) SetPlatformUserID(s string) {
	m.platform_user_id = &s
}

// PlatformUserID returns the value of the "platform_user_id" field in the mutation.
func (m *AuthorizeSocialPlatformInfoMutation) PlatformUserID() (r string, exists bool) {
	v := m.platform_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformUserID returns the old "platform_user_id" field's value of the AuthorizeSocialPlatformInfo entity.
// If the AuthorizeSocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeSocialPlatformInfoMutation) OldPlatformUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformUserID: %w", err)
	}
	return oldValue.PlatformUserID, nil
}

// ResetPlatformUserID resets all changes to the "platform_user_id" field.
func (m *AuthorizeSocialPlatformInfoMutation) ResetPlatformUserID() {
	m.platform_user_id = nil
}

// SetPlatformID sets the "platform_id" field.
func (m *AuthorizeSocialPlatformInfoMutation) SetPlatformID(i int) {
	m.platform_id = &i
	m.addplatform_id = nil
}

// PlatformID returns the value of the "platform_id" field in the mutation.
func (m *AuthorizeSocialPlatformInfoMutation) PlatformID() (r int, exists bool) {
	v := m.platform_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformID returns the old "platform_id" field's value of the AuthorizeSocialPlatformInfo entity.
// If the AuthorizeSocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeSocialPlatformInfoMutation) OldPlatformID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformID: %w", err)
	}
	return oldValue.PlatformID, nil
}

// AddPlatformID adds i to the "platform_id" field.
func (m *AuthorizeSocialPlatformInfoMutation) AddPlatformID(i int) {
	if m.addplatform_id != nil {
		*m.addplatform_id += i
	} else {
		m.addplatform_id = &i
	}
}

// AddedPlatformID returns the value that was added to the "platform_id" field in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) AddedPlatformID() (r int, exists bool) {
	v := m.addplatform_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlatformID resets all changes to the "platform_id" field.
func (m *AuthorizeSocialPlatformInfoMutation) ResetPlatformID() {
	m.platform_id = nil
	m.addplatform_id = nil
}

// SetComment sets the "comment" field.
func (m *AuthorizeSocialPlatformInfoMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *AuthorizeSocialPlatformInfoMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the AuthorizeSocialPlatformInfo entity.
// If the AuthorizeSocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeSocialPlatformInfoMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *AuthorizeSocialPlatformInfoMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[authorizesocialplatforminfo.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) CommentCleared() bool {
	_, ok := m.clearedFields[authorizesocialplatforminfo.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *AuthorizeSocialPlatformInfoMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, authorizesocialplatforminfo.FieldComment)
}

// ClearUser clears the "user" edge to the User entity.
func (m *AuthorizeSocialPlatformInfoMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[authorizesocialplatforminfo.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *AuthorizeSocialPlatformInfoMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *AuthorizeSocialPlatformInfoMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *AuthorizeSocialPlatformInfoMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the AuthorizeSocialPlatformInfoMutation builder.
func (m *AuthorizeSocialPlatformInfoMutation) Where(ps ...predicate.AuthorizeSocialPlatformInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthorizeSocialPlatformInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthorizeSocialPlatformInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AuthorizeSocialPlatformInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthorizeSocialPlatformInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthorizeSocialPlatformInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AuthorizeSocialPlatformInfo).
func (m *AuthorizeSocialPlatformInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthorizeSocialPlatformInfoMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.user != nil {
		fields = append(fields, authorizesocialplatforminfo.FieldUserID)
	}
	if m.platform != nil {
		fields = append(fields, authorizesocialplatforminfo.FieldPlatform)
	}
	if m.platform_user_id != nil {
		fields = append(fields, authorizesocialplatforminfo.FieldPlatformUserID)
	}
	if m.platform_id != nil {
		fields = append(fields, authorizesocialplatforminfo.FieldPlatformID)
	}
	if m.comment != nil {
		fields = append(fields, authorizesocialplatforminfo.FieldComment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthorizeSocialPlatformInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authorizesocialplatforminfo.FieldUserID:
		return m.UserID()
	case authorizesocialplatforminfo.FieldPlatform:
		return m.Platform()
	case authorizesocialplatforminfo.FieldPlatformUserID:
		return m.PlatformUserID()
	case authorizesocialplatforminfo.FieldPlatformID:
		return m.PlatformID()
	case authorizesocialplatforminfo.FieldComment:
		return m.Comment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthorizeSocialPlatformInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authorizesocialplatforminfo.FieldUserID:
		return m.OldUserID(ctx)
	case authorizesocialplatforminfo.FieldPlatform:
		return m.OldPlatform(ctx)
	case authorizesocialplatforminfo.FieldPlatformUserID:
		return m.OldPlatformUserID(ctx)
	case authorizesocialplatforminfo.FieldPlatformID:
		return m.OldPlatformID(ctx)
	case authorizesocialplatforminfo.FieldComment:
		return m.OldComment(ctx)
	}
	return nil, fmt.Errorf("unknown AuthorizeSocialPlatformInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorizeSocialPlatformInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authorizesocialplatforminfo.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case authorizesocialplatforminfo.FieldPlatform:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case authorizesocialplatforminfo.FieldPlatformUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformUserID(v)
		return nil
	case authorizesocialplatforminfo.FieldPlatformID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformID(v)
		return nil
	case authorizesocialplatforminfo.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	}
	return fmt.Errorf("unknown AuthorizeSocialPlatformInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) AddedFields() []string {
	var fields []string
	if m.addplatform_id != nil {
		fields = append(fields, authorizesocialplatforminfo.FieldPlatformID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthorizeSocialPlatformInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case authorizesocialplatforminfo.FieldPlatformID:
		return m.AddedPlatformID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorizeSocialPlatformInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case authorizesocialplatforminfo.FieldPlatformID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlatformID(v)
		return nil
	}
	return fmt.Errorf("unknown AuthorizeSocialPlatformInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthorizeSocialPlatformInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(authorizesocialplatforminfo.FieldComment) {
		fields = append(fields, authorizesocialplatforminfo.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthorizeSocialPlatformInfoMutation) ClearField(name string) error {
	switch name {
	case authorizesocialplatforminfo.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown AuthorizeSocialPlatformInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthorizeSocialPlatformInfoMutation) ResetField(name string) error {
	switch name {
	case authorizesocialplatforminfo.FieldUserID:
		m.ResetUserID()
		return nil
	case authorizesocialplatforminfo.FieldPlatform:
		m.ResetPlatform()
		return nil
	case authorizesocialplatforminfo.FieldPlatformUserID:
		m.ResetPlatformUserID()
		return nil
	case authorizesocialplatforminfo.FieldPlatformID:
		m.ResetPlatformID()
		return nil
	case authorizesocialplatforminfo.FieldComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown AuthorizeSocialPlatformInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, authorizesocialplatforminfo.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case authorizesocialplatforminfo.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, authorizesocialplatforminfo.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthorizeSocialPlatformInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case authorizesocialplatforminfo.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthorizeSocialPlatformInfoMutation) ClearEdge(name string) error {
	switch name {
	case authorizesocialplatforminfo.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown AuthorizeSocialPlatformInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthorizeSocialPlatformInfoMutation) ResetEdge(name string) error {
	switch name {
	case authorizesocialplatforminfo.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown AuthorizeSocialPlatformInfo edge %s", name)
}

// EmailInfoMutation represents an operation that mutates the EmailInfo nodes in the graph.
type EmailInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	email         *string
	verified      *bool
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*EmailInfo, error)
	predicates    []predicate.EmailInfo
}

var _ ent.Mutation = (*EmailInfoMutation)(nil)

// emailinfoOption allows management of the mutation configuration using functional options.
type emailinfoOption func(*EmailInfoMutation)

// newEmailInfoMutation creates new mutation for the EmailInfo entity.
func newEmailInfoMutation(c config, op Op, opts ...emailinfoOption) *EmailInfoMutation {
	m := &EmailInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeEmailInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmailInfoID sets the ID field of the mutation.
func withEmailInfoID(id int) emailinfoOption {
	return func(m *EmailInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *EmailInfo
		)
		m.oldValue = func(ctx context.Context) (*EmailInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmailInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmailInfo sets the old EmailInfo of the mutation.
func withEmailInfo(node *EmailInfo) emailinfoOption {
	return func(m *EmailInfoMutation) {
		m.oldValue = func(context.Context) (*EmailInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmailInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmailInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("postgresql: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmailInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmailInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmailInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *EmailInfoMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *EmailInfoMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the EmailInfo entity.
// If the EmailInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailInfoMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *EmailInfoMutation) ResetEmail() {
	m.email = nil
}

// SetVerified sets the "verified" field.
func (m *EmailInfoMutation) SetVerified(b bool) {
	m.verified = &b
}

// Verified returns the value of the "verified" field in the mutation.
func (m *EmailInfoMutation) Verified() (r bool, exists bool) {
	v := m.verified
	if v == nil {
		return
	}
	return *v, true
}

// OldVerified returns the old "verified" field's value of the EmailInfo entity.
// If the EmailInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailInfoMutation) OldVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerified: %w", err)
	}
	return oldValue.Verified, nil
}

// ResetVerified resets all changes to the "verified" field.
func (m *EmailInfoMutation) ResetVerified() {
	m.verified = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *EmailInfoMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *EmailInfoMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *EmailInfoMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *EmailInfoMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *EmailInfoMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *EmailInfoMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the EmailInfoMutation builder.
func (m *EmailInfoMutation) Where(ps ...predicate.EmailInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmailInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmailInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmailInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmailInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmailInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmailInfo).
func (m *EmailInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmailInfoMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.email != nil {
		fields = append(fields, emailinfo.FieldEmail)
	}
	if m.verified != nil {
		fields = append(fields, emailinfo.FieldVerified)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmailInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emailinfo.FieldEmail:
		return m.Email()
	case emailinfo.FieldVerified:
		return m.Verified()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmailInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emailinfo.FieldEmail:
		return m.OldEmail(ctx)
	case emailinfo.FieldVerified:
		return m.OldVerified(ctx)
	}
	return nil, fmt.Errorf("unknown EmailInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emailinfo.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case emailinfo.FieldVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerified(v)
		return nil
	}
	return fmt.Errorf("unknown EmailInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmailInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmailInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmailInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmailInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmailInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmailInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmailInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmailInfoMutation) ResetField(name string) error {
	switch name {
	case emailinfo.FieldEmail:
		m.ResetEmail()
		return nil
	case emailinfo.FieldVerified:
		m.ResetVerified()
		return nil
	}
	return fmt.Errorf("unknown EmailInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmailInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, emailinfo.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmailInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emailinfo.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmailInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmailInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmailInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, emailinfo.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmailInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case emailinfo.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmailInfoMutation) ClearEdge(name string) error {
	switch name {
	case emailinfo.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown EmailInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmailInfoMutation) ResetEdge(name string) error {
	switch name {
	case emailinfo.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown EmailInfo edge %s", name)
}

// GameAccountBindingMutation represents an operation that mutates the GameAccountBinding nodes in the graph.
type GameAccountBindingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	server        *string
	game_user_id  *string
	verified      *bool
	suite         **schema.SuiteDataPrivacySettings
	mysekai       **schema.MysekaiDataPrivacySettings
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*GameAccountBinding, error)
	predicates    []predicate.GameAccountBinding
}

var _ ent.Mutation = (*GameAccountBindingMutation)(nil)

// gameaccountbindingOption allows management of the mutation configuration using functional options.
type gameaccountbindingOption func(*GameAccountBindingMutation)

// newGameAccountBindingMutation creates new mutation for the GameAccountBinding entity.
func newGameAccountBindingMutation(c config, op Op, opts ...gameaccountbindingOption) *GameAccountBindingMutation {
	m := &GameAccountBindingMutation{
		config:        c,
		op:            op,
		typ:           TypeGameAccountBinding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGameAccountBindingID sets the ID field of the mutation.
func withGameAccountBindingID(id int) gameaccountbindingOption {
	return func(m *GameAccountBindingMutation) {
		var (
			err   error
			once  sync.Once
			value *GameAccountBinding
		)
		m.oldValue = func(ctx context.Context) (*GameAccountBinding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GameAccountBinding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGameAccountBinding sets the old GameAccountBinding of the mutation.
func withGameAccountBinding(node *GameAccountBinding) gameaccountbindingOption {
	return func(m *GameAccountBindingMutation) {
		m.oldValue = func(context.Context) (*GameAccountBinding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameAccountBindingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameAccountBindingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("postgresql: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameAccountBindingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameAccountBindingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GameAccountBinding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetServer sets the "server" field.
func (m *GameAccountBindingMutation) SetServer(s string) {
	m.server = &s
}

// Server returns the value of the "server" field in the mutation.
func (m *GameAccountBindingMutation) Server() (r string, exists bool) {
	v := m.server
	if v == nil {
		return
	}
	return *v, true
}

// OldServer returns the old "server" field's value of the GameAccountBinding entity.
// If the GameAccountBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountBindingMutation) OldServer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServer: %w", err)
	}
	return oldValue.Server, nil
}

// ResetServer resets all changes to the "server" field.
func (m *GameAccountBindingMutation) ResetServer() {
	m.server = nil
}

// SetGameUserID sets the "game_user_id" field.
func (m *GameAccountBindingMutation) SetGameUserID(s string) {
	m.game_user_id = &s
}

// GameUserID returns the value of the "game_user_id" field in the mutation.
func (m *GameAccountBindingMutation) GameUserID() (r string, exists bool) {
	v := m.game_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGameUserID returns the old "game_user_id" field's value of the GameAccountBinding entity.
// If the GameAccountBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountBindingMutation) OldGameUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGameUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGameUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGameUserID: %w", err)
	}
	return oldValue.GameUserID, nil
}

// ResetGameUserID resets all changes to the "game_user_id" field.
func (m *GameAccountBindingMutation) ResetGameUserID() {
	m.game_user_id = nil
}

// SetVerified sets the "verified" field.
func (m *GameAccountBindingMutation) SetVerified(b bool) {
	m.verified = &b
}

// Verified returns the value of the "verified" field in the mutation.
func (m *GameAccountBindingMutation) Verified() (r bool, exists bool) {
	v := m.verified
	if v == nil {
		return
	}
	return *v, true
}

// OldVerified returns the old "verified" field's value of the GameAccountBinding entity.
// If the GameAccountBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountBindingMutation) OldVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerified: %w", err)
	}
	return oldValue.Verified, nil
}

// ResetVerified resets all changes to the "verified" field.
func (m *GameAccountBindingMutation) ResetVerified() {
	m.verified = nil
}

// SetSuite sets the "suite" field.
func (m *GameAccountBindingMutation) SetSuite(sdps *schema.SuiteDataPrivacySettings) {
	m.suite = &sdps
}

// Suite returns the value of the "suite" field in the mutation.
func (m *GameAccountBindingMutation) Suite() (r *schema.SuiteDataPrivacySettings, exists bool) {
	v := m.suite
	if v == nil {
		return
	}
	return *v, true
}

// OldSuite returns the old "suite" field's value of the GameAccountBinding entity.
// If the GameAccountBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountBindingMutation) OldSuite(ctx context.Context) (v *schema.SuiteDataPrivacySettings, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuite: %w", err)
	}
	return oldValue.Suite, nil
}

// ClearSuite clears the value of the "suite" field.
func (m *GameAccountBindingMutation) ClearSuite() {
	m.suite = nil
	m.clearedFields[gameaccountbinding.FieldSuite] = struct{}{}
}

// SuiteCleared returns if the "suite" field was cleared in this mutation.
func (m *GameAccountBindingMutation) SuiteCleared() bool {
	_, ok := m.clearedFields[gameaccountbinding.FieldSuite]
	return ok
}

// ResetSuite resets all changes to the "suite" field.
func (m *GameAccountBindingMutation) ResetSuite() {
	m.suite = nil
	delete(m.clearedFields, gameaccountbinding.FieldSuite)
}

// SetMysekai sets the "mysekai" field.
func (m *GameAccountBindingMutation) SetMysekai(sdps *schema.MysekaiDataPrivacySettings) {
	m.mysekai = &sdps
}

// Mysekai returns the value of the "mysekai" field in the mutation.
func (m *GameAccountBindingMutation) Mysekai() (r *schema.MysekaiDataPrivacySettings, exists bool) {
	v := m.mysekai
	if v == nil {
		return
	}
	return *v, true
}

// OldMysekai returns the old "mysekai" field's value of the GameAccountBinding entity.
// If the GameAccountBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountBindingMutation) OldMysekai(ctx context.Context) (v *schema.MysekaiDataPrivacySettings, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMysekai is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMysekai requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMysekai: %w", err)
	}
	return oldValue.Mysekai, nil
}

// ClearMysekai clears the value of the "mysekai" field.
func (m *GameAccountBindingMutation) ClearMysekai() {
	m.mysekai = nil
	m.clearedFields[gameaccountbinding.FieldMysekai] = struct{}{}
}

// MysekaiCleared returns if the "mysekai" field was cleared in this mutation.
func (m *GameAccountBindingMutation) MysekaiCleared() bool {
	_, ok := m.clearedFields[gameaccountbinding.FieldMysekai]
	return ok
}

// ResetMysekai resets all changes to the "mysekai" field.
func (m *GameAccountBindingMutation) ResetMysekai() {
	m.mysekai = nil
	delete(m.clearedFields, gameaccountbinding.FieldMysekai)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GameAccountBindingMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GameAccountBindingMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GameAccountBindingMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GameAccountBindingMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GameAccountBindingMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GameAccountBindingMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GameAccountBindingMutation builder.
func (m *GameAccountBindingMutation) Where(ps ...predicate.GameAccountBinding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameAccountBindingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameAccountBindingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GameAccountBinding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GameAccountBindingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameAccountBindingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GameAccountBinding).
func (m *GameAccountBindingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameAccountBindingMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.server != nil {
		fields = append(fields, gameaccountbinding.FieldServer)
	}
	if m.game_user_id != nil {
		fields = append(fields, gameaccountbinding.FieldGameUserID)
	}
	if m.verified != nil {
		fields = append(fields, gameaccountbinding.FieldVerified)
	}
	if m.suite != nil {
		fields = append(fields, gameaccountbinding.FieldSuite)
	}
	if m.mysekai != nil {
		fields = append(fields, gameaccountbinding.FieldMysekai)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameAccountBindingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gameaccountbinding.FieldServer:
		return m.Server()
	case gameaccountbinding.FieldGameUserID:
		return m.GameUserID()
	case gameaccountbinding.FieldVerified:
		return m.Verified()
	case gameaccountbinding.FieldSuite:
		return m.Suite()
	case gameaccountbinding.FieldMysekai:
		return m.Mysekai()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameAccountBindingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gameaccountbinding.FieldServer:
		return m.OldServer(ctx)
	case gameaccountbinding.FieldGameUserID:
		return m.OldGameUserID(ctx)
	case gameaccountbinding.FieldVerified:
		return m.OldVerified(ctx)
	case gameaccountbinding.FieldSuite:
		return m.OldSuite(ctx)
	case gameaccountbinding.FieldMysekai:
		return m.OldMysekai(ctx)
	}
	return nil, fmt.Errorf("unknown GameAccountBinding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameAccountBindingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gameaccountbinding.FieldServer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServer(v)
		return nil
	case gameaccountbinding.FieldGameUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGameUserID(v)
		return nil
	case gameaccountbinding.FieldVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerified(v)
		return nil
	case gameaccountbinding.FieldSuite:
		v, ok := value.(*schema.SuiteDataPrivacySettings)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuite(v)
		return nil
	case gameaccountbinding.FieldMysekai:
		v, ok := value.(*schema.MysekaiDataPrivacySettings)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMysekai(v)
		return nil
	}
	return fmt.Errorf("unknown GameAccountBinding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameAccountBindingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameAccountBindingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameAccountBindingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GameAccountBinding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameAccountBindingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(gameaccountbinding.FieldSuite) {
		fields = append(fields, gameaccountbinding.FieldSuite)
	}
	if m.FieldCleared(gameaccountbinding.FieldMysekai) {
		fields = append(fields, gameaccountbinding.FieldMysekai)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameAccountBindingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameAccountBindingMutation) ClearField(name string) error {
	switch name {
	case gameaccountbinding.FieldSuite:
		m.ClearSuite()
		return nil
	case gameaccountbinding.FieldMysekai:
		m.ClearMysekai()
		return nil
	}
	return fmt.Errorf("unknown GameAccountBinding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameAccountBindingMutation) ResetField(name string) error {
	switch name {
	case gameaccountbinding.FieldServer:
		m.ResetServer()
		return nil
	case gameaccountbinding.FieldGameUserID:
		m.ResetGameUserID()
		return nil
	case gameaccountbinding.FieldVerified:
		m.ResetVerified()
		return nil
	case gameaccountbinding.FieldSuite:
		m.ResetSuite()
		return nil
	case gameaccountbinding.FieldMysekai:
		m.ResetMysekai()
		return nil
	}
	return fmt.Errorf("unknown GameAccountBinding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameAccountBindingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, gameaccountbinding.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameAccountBindingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gameaccountbinding.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameAccountBindingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameAccountBindingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameAccountBindingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, gameaccountbinding.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameAccountBindingMutation) EdgeCleared(name string) bool {
	switch name {
	case gameaccountbinding.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameAccountBindingMutation) ClearEdge(name string) error {
	switch name {
	case gameaccountbinding.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown GameAccountBinding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameAccountBindingMutation) ResetEdge(name string) error {
	switch name {
	case gameaccountbinding.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown GameAccountBinding edge %s", name)
}

// SocialPlatformInfoMutation represents an operation that mutates the SocialPlatformInfo nodes in the graph.
type SocialPlatformInfoMutation struct {
	config
	op               Op
	typ              string
	id               *int
	platform         *string
	platform_user_id *string
	verified         *bool
	clearedFields    map[string]struct{}
	user             *string
	cleareduser      bool
	done             bool
	oldValue         func(context.Context) (*SocialPlatformInfo, error)
	predicates       []predicate.SocialPlatformInfo
}

var _ ent.Mutation = (*SocialPlatformInfoMutation)(nil)

// socialplatforminfoOption allows management of the mutation configuration using functional options.
type socialplatforminfoOption func(*SocialPlatformInfoMutation)

// newSocialPlatformInfoMutation creates new mutation for the SocialPlatformInfo entity.
func newSocialPlatformInfoMutation(c config, op Op, opts ...socialplatforminfoOption) *SocialPlatformInfoMutation {
	m := &SocialPlatformInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeSocialPlatformInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSocialPlatformInfoID sets the ID field of the mutation.
func withSocialPlatformInfoID(id int) socialplatforminfoOption {
	return func(m *SocialPlatformInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *SocialPlatformInfo
		)
		m.oldValue = func(ctx context.Context) (*SocialPlatformInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SocialPlatformInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSocialPlatformInfo sets the old SocialPlatformInfo of the mutation.
func withSocialPlatformInfo(node *SocialPlatformInfo) socialplatforminfoOption {
	return func(m *SocialPlatformInfoMutation) {
		m.oldValue = func(context.Context) (*SocialPlatformInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SocialPlatformInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SocialPlatformInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("postgresql: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SocialPlatformInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SocialPlatformInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SocialPlatformInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPlatform sets the "platform" field.
func (m *SocialPlatformInfoMutation) SetPlatform(s string) {
	m.platform = &s
}

// Platform returns the value of the "platform" field in the mutation.
func (m *SocialPlatformInfoMutation) Platform() (r string, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the SocialPlatformInfo entity.
// If the SocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SocialPlatformInfoMutation) OldPlatform(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *SocialPlatformInfoMutation) ResetPlatform() {
	m.platform = nil
}

// SetPlatformUserID sets the "platform_user_id" field.
func (m *SocialPlatformInfoMutation) SetPlatformUserID(s string) {
	m.platform_user_id = &s
}

// PlatformUserID returns the value of the "platform_user_id" field in the mutation.
func (m *SocialPlatformInfoMutation) PlatformUserID() (r string, exists bool) {
	v := m.platform_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformUserID returns the old "platform_user_id" field's value of the SocialPlatformInfo entity.
// If the SocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SocialPlatformInfoMutation) OldPlatformUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformUserID: %w", err)
	}
	return oldValue.PlatformUserID, nil
}

// ResetPlatformUserID resets all changes to the "platform_user_id" field.
func (m *SocialPlatformInfoMutation) ResetPlatformUserID() {
	m.platform_user_id = nil
}

// SetVerified sets the "verified" field.
func (m *SocialPlatformInfoMutation) SetVerified(b bool) {
	m.verified = &b
}

// Verified returns the value of the "verified" field in the mutation.
func (m *SocialPlatformInfoMutation) Verified() (r bool, exists bool) {
	v := m.verified
	if v == nil {
		return
	}
	return *v, true
}

// OldVerified returns the old "verified" field's value of the SocialPlatformInfo entity.
// If the SocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SocialPlatformInfoMutation) OldVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerified: %w", err)
	}
	return oldValue.Verified, nil
}

// ResetVerified resets all changes to the "verified" field.
func (m *SocialPlatformInfoMutation) ResetVerified() {
	m.verified = nil
}

// SetUserSocialPlatformInfo sets the "user_social_platform_info" field.
func (m *SocialPlatformInfoMutation) SetUserSocialPlatformInfo(s string) {
	m.user = &s
}

// UserSocialPlatformInfo returns the value of the "user_social_platform_info" field in the mutation.
func (m *SocialPlatformInfoMutation) UserSocialPlatformInfo() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSocialPlatformInfo returns the old "user_social_platform_info" field's value of the SocialPlatformInfo entity.
// If the SocialPlatformInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SocialPlatformInfoMutation) OldUserSocialPlatformInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSocialPlatformInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSocialPlatformInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSocialPlatformInfo: %w", err)
	}
	return oldValue.UserSocialPlatformInfo, nil
}

// ResetUserSocialPlatformInfo resets all changes to the "user_social_platform_info" field.
func (m *SocialPlatformInfoMutation) ResetUserSocialPlatformInfo() {
	m.user = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SocialPlatformInfoMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SocialPlatformInfoMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[socialplatforminfo.FieldUserSocialPlatformInfo] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SocialPlatformInfoMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SocialPlatformInfoMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SocialPlatformInfoMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SocialPlatformInfoMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SocialPlatformInfoMutation builder.
func (m *SocialPlatformInfoMutation) Where(ps ...predicate.SocialPlatformInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SocialPlatformInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SocialPlatformInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SocialPlatformInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SocialPlatformInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SocialPlatformInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SocialPlatformInfo).
func (m *SocialPlatformInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SocialPlatformInfoMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.platform != nil {
		fields = append(fields, socialplatforminfo.FieldPlatform)
	}
	if m.platform_user_id != nil {
		fields = append(fields, socialplatforminfo.FieldPlatformUserID)
	}
	if m.verified != nil {
		fields = append(fields, socialplatforminfo.FieldVerified)
	}
	if m.user != nil {
		fields = append(fields, socialplatforminfo.FieldUserSocialPlatformInfo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SocialPlatformInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case socialplatforminfo.FieldPlatform:
		return m.Platform()
	case socialplatforminfo.FieldPlatformUserID:
		return m.PlatformUserID()
	case socialplatforminfo.FieldVerified:
		return m.Verified()
	case socialplatforminfo.FieldUserSocialPlatformInfo:
		return m.UserSocialPlatformInfo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SocialPlatformInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case socialplatforminfo.FieldPlatform:
		return m.OldPlatform(ctx)
	case socialplatforminfo.FieldPlatformUserID:
		return m.OldPlatformUserID(ctx)
	case socialplatforminfo.FieldVerified:
		return m.OldVerified(ctx)
	case socialplatforminfo.FieldUserSocialPlatformInfo:
		return m.OldUserSocialPlatformInfo(ctx)
	}
	return nil, fmt.Errorf("unknown SocialPlatformInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SocialPlatformInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case socialplatforminfo.FieldPlatform:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case socialplatforminfo.FieldPlatformUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformUserID(v)
		return nil
	case socialplatforminfo.FieldVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerified(v)
		return nil
	case socialplatforminfo.FieldUserSocialPlatformInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSocialPlatformInfo(v)
		return nil
	}
	return fmt.Errorf("unknown SocialPlatformInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SocialPlatformInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SocialPlatformInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SocialPlatformInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SocialPlatformInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SocialPlatformInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SocialPlatformInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SocialPlatformInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SocialPlatformInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SocialPlatformInfoMutation) ResetField(name string) error {
	switch name {
	case socialplatforminfo.FieldPlatform:
		m.ResetPlatform()
		return nil
	case socialplatforminfo.FieldPlatformUserID:
		m.ResetPlatformUserID()
		return nil
	case socialplatforminfo.FieldVerified:
		m.ResetVerified()
		return nil
	case socialplatforminfo.FieldUserSocialPlatformInfo:
		m.ResetUserSocialPlatformInfo()
		return nil
	}
	return fmt.Errorf("unknown SocialPlatformInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SocialPlatformInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, socialplatforminfo.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SocialPlatformInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case socialplatforminfo.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SocialPlatformInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SocialPlatformInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SocialPlatformInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, socialplatforminfo.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SocialPlatformInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case socialplatforminfo.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SocialPlatformInfoMutation) ClearEdge(name string) error {
	switch name {
	case socialplatforminfo.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown SocialPlatformInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SocialPlatformInfoMutation) ResetEdge(name string) error {
	switch name {
	case socialplatforminfo.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown SocialPlatformInfo edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *string
	name                               *string
	email                              *string
	password_hash                      *string
	avatar_path                        *string
	allow_cn_mysekai                   *bool
	clearedFields                      map[string]struct{}
	email_info                         *int
	clearedemail_info                  bool
	social_platform_info               *int
	clearedsocial_platform_info        bool
	authorized_social_platforms        map[int]struct{}
	removedauthorized_social_platforms map[int]struct{}
	clearedauthorized_social_platforms bool
	game_account_bindings              map[int]struct{}
	removedgame_account_bindings       map[int]struct{}
	clearedgame_account_bindings       bool
	done                               bool
	oldValue                           func(context.Context) (*User, error)
	predicates                         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("postgresql: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetAvatarPath sets the "avatar_path" field.
func (m *UserMutation) SetAvatarPath(s string) {
	m.avatar_path = &s
}

// AvatarPath returns the value of the "avatar_path" field in the mutation.
func (m *UserMutation) AvatarPath() (r string, exists bool) {
	v := m.avatar_path
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarPath returns the old "avatar_path" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarPath: %w", err)
	}
	return oldValue.AvatarPath, nil
}

// ClearAvatarPath clears the value of the "avatar_path" field.
func (m *UserMutation) ClearAvatarPath() {
	m.avatar_path = nil
	m.clearedFields[user.FieldAvatarPath] = struct{}{}
}

// AvatarPathCleared returns if the "avatar_path" field was cleared in this mutation.
func (m *UserMutation) AvatarPathCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarPath]
	return ok
}

// ResetAvatarPath resets all changes to the "avatar_path" field.
func (m *UserMutation) ResetAvatarPath() {
	m.avatar_path = nil
	delete(m.clearedFields, user.FieldAvatarPath)
}

// SetAllowCnMysekai sets the "allow_cn_mysekai" field.
func (m *UserMutation) SetAllowCnMysekai(b bool) {
	m.allow_cn_mysekai = &b
}

// AllowCnMysekai returns the value of the "allow_cn_mysekai" field in the mutation.
func (m *UserMutation) AllowCnMysekai() (r bool, exists bool) {
	v := m.allow_cn_mysekai
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowCnMysekai returns the old "allow_cn_mysekai" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAllowCnMysekai(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowCnMysekai is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowCnMysekai requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowCnMysekai: %w", err)
	}
	return oldValue.AllowCnMysekai, nil
}

// ResetAllowCnMysekai resets all changes to the "allow_cn_mysekai" field.
func (m *UserMutation) ResetAllowCnMysekai() {
	m.allow_cn_mysekai = nil
}

// SetEmailInfoID sets the "email_info" edge to the EmailInfo entity by id.
func (m *UserMutation) SetEmailInfoID(id int) {
	m.email_info = &id
}

// ClearEmailInfo clears the "email_info" edge to the EmailInfo entity.
func (m *UserMutation) ClearEmailInfo() {
	m.clearedemail_info = true
}

// EmailInfoCleared reports if the "email_info" edge to the EmailInfo entity was cleared.
func (m *UserMutation) EmailInfoCleared() bool {
	return m.clearedemail_info
}

// EmailInfoID returns the "email_info" edge ID in the mutation.
func (m *UserMutation) EmailInfoID() (id int, exists bool) {
	if m.email_info != nil {
		return *m.email_info, true
	}
	return
}

// EmailInfoIDs returns the "email_info" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmailInfoID instead. It exists only for internal usage by the builders.
func (m *UserMutation) EmailInfoIDs() (ids []int) {
	if id := m.email_info; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmailInfo resets all changes to the "email_info" edge.
func (m *UserMutation) ResetEmailInfo() {
	m.email_info = nil
	m.clearedemail_info = false
}

// SetSocialPlatformInfoID sets the "social_platform_info" edge to the SocialPlatformInfo entity by id.
func (m *UserMutation) SetSocialPlatformInfoID(id int) {
	m.social_platform_info = &id
}

// ClearSocialPlatformInfo clears the "social_platform_info" edge to the SocialPlatformInfo entity.
func (m *UserMutation) ClearSocialPlatformInfo() {
	m.clearedsocial_platform_info = true
}

// SocialPlatformInfoCleared reports if the "social_platform_info" edge to the SocialPlatformInfo entity was cleared.
func (m *UserMutation) SocialPlatformInfoCleared() bool {
	return m.clearedsocial_platform_info
}

// SocialPlatformInfoID returns the "social_platform_info" edge ID in the mutation.
func (m *UserMutation) SocialPlatformInfoID() (id int, exists bool) {
	if m.social_platform_info != nil {
		return *m.social_platform_info, true
	}
	return
}

// SocialPlatformInfoIDs returns the "social_platform_info" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SocialPlatformInfoID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SocialPlatformInfoIDs() (ids []int) {
	if id := m.social_platform_info; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSocialPlatformInfo resets all changes to the "social_platform_info" edge.
func (m *UserMutation) ResetSocialPlatformInfo() {
	m.social_platform_info = nil
	m.clearedsocial_platform_info = false
}

// AddAuthorizedSocialPlatformIDs adds the "authorized_social_platforms" edge to the AuthorizeSocialPlatformInfo entity by ids.
func (m *UserMutation) AddAuthorizedSocialPlatformIDs(ids ...int) {
	if m.authorized_social_platforms == nil {
		m.authorized_social_platforms = make(map[int]struct{})
	}
	for i := range ids {
		m.authorized_social_platforms[ids[i]] = struct{}{}
	}
}

// ClearAuthorizedSocialPlatforms clears the "authorized_social_platforms" edge to the AuthorizeSocialPlatformInfo entity.
func (m *UserMutation) ClearAuthorizedSocialPlatforms() {
	m.clearedauthorized_social_platforms = true
}

// AuthorizedSocialPlatformsCleared reports if the "authorized_social_platforms" edge to the AuthorizeSocialPlatformInfo entity was cleared.
func (m *UserMutation) AuthorizedSocialPlatformsCleared() bool {
	return m.clearedauthorized_social_platforms
}

// RemoveAuthorizedSocialPlatformIDs removes the "authorized_social_platforms" edge to the AuthorizeSocialPlatformInfo entity by IDs.
func (m *UserMutation) RemoveAuthorizedSocialPlatformIDs(ids ...int) {
	if m.removedauthorized_social_platforms == nil {
		m.removedauthorized_social_platforms = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.authorized_social_platforms, ids[i])
		m.removedauthorized_social_platforms[ids[i]] = struct{}{}
	}
}

// RemovedAuthorizedSocialPlatforms returns the removed IDs of the "authorized_social_platforms" edge to the AuthorizeSocialPlatformInfo entity.
func (m *UserMutation) RemovedAuthorizedSocialPlatformsIDs() (ids []int) {
	for id := range m.removedauthorized_social_platforms {
		ids = append(ids, id)
	}
	return
}

// AuthorizedSocialPlatformsIDs returns the "authorized_social_platforms" edge IDs in the mutation.
func (m *UserMutation) AuthorizedSocialPlatformsIDs() (ids []int) {
	for id := range m.authorized_social_platforms {
		ids = append(ids, id)
	}
	return
}

// ResetAuthorizedSocialPlatforms resets all changes to the "authorized_social_platforms" edge.
func (m *UserMutation) ResetAuthorizedSocialPlatforms() {
	m.authorized_social_platforms = nil
	m.clearedauthorized_social_platforms = false
	m.removedauthorized_social_platforms = nil
}

// AddGameAccountBindingIDs adds the "game_account_bindings" edge to the GameAccountBinding entity by ids.
func (m *UserMutation) AddGameAccountBindingIDs(ids ...int) {
	if m.game_account_bindings == nil {
		m.game_account_bindings = make(map[int]struct{})
	}
	for i := range ids {
		m.game_account_bindings[ids[i]] = struct{}{}
	}
}

// ClearGameAccountBindings clears the "game_account_bindings" edge to the GameAccountBinding entity.
func (m *UserMutation) ClearGameAccountBindings() {
	m.clearedgame_account_bindings = true
}

// GameAccountBindingsCleared reports if the "game_account_bindings" edge to the GameAccountBinding entity was cleared.
func (m *UserMutation) GameAccountBindingsCleared() bool {
	return m.clearedgame_account_bindings
}

// RemoveGameAccountBindingIDs removes the "game_account_bindings" edge to the GameAccountBinding entity by IDs.
func (m *UserMutation) RemoveGameAccountBindingIDs(ids ...int) {
	if m.removedgame_account_bindings == nil {
		m.removedgame_account_bindings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.game_account_bindings, ids[i])
		m.removedgame_account_bindings[ids[i]] = struct{}{}
	}
}

// RemovedGameAccountBindings returns the removed IDs of the "game_account_bindings" edge to the GameAccountBinding entity.
func (m *UserMutation) RemovedGameAccountBindingsIDs() (ids []int) {
	for id := range m.removedgame_account_bindings {
		ids = append(ids, id)
	}
	return
}

// GameAccountBindingsIDs returns the "game_account_bindings" edge IDs in the mutation.
func (m *UserMutation) GameAccountBindingsIDs() (ids []int) {
	for id := range m.game_account_bindings {
		ids = append(ids, id)
	}
	return
}

// ResetGameAccountBindings resets all changes to the "game_account_bindings" edge.
func (m *UserMutation) ResetGameAccountBindings() {
	m.game_account_bindings = nil
	m.clearedgame_account_bindings = false
	m.removedgame_account_bindings = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.avatar_path != nil {
		fields = append(fields, user.FieldAvatarPath)
	}
	if m.allow_cn_mysekai != nil {
		fields = append(fields, user.FieldAllowCnMysekai)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldAvatarPath:
		return m.AvatarPath()
	case user.FieldAllowCnMysekai:
		return m.AllowCnMysekai()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldAvatarPath:
		return m.OldAvatarPath(ctx)
	case user.FieldAllowCnMysekai:
		return m.OldAllowCnMysekai(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldAvatarPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarPath(v)
		return nil
	case user.FieldAllowCnMysekai:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowCnMysekai(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAvatarPath) {
		fields = append(fields, user.FieldAvatarPath)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAvatarPath:
		m.ClearAvatarPath()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldAvatarPath:
		m.ResetAvatarPath()
		return nil
	case user.FieldAllowCnMysekai:
		m.ResetAllowCnMysekai()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.email_info != nil {
		edges = append(edges, user.EdgeEmailInfo)
	}
	if m.social_platform_info != nil {
		edges = append(edges, user.EdgeSocialPlatformInfo)
	}
	if m.authorized_social_platforms != nil {
		edges = append(edges, user.EdgeAuthorizedSocialPlatforms)
	}
	if m.game_account_bindings != nil {
		edges = append(edges, user.EdgeGameAccountBindings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEmailInfo:
		if id := m.email_info; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeSocialPlatformInfo:
		if id := m.social_platform_info; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeAuthorizedSocialPlatforms:
		ids := make([]ent.Value, 0, len(m.authorized_social_platforms))
		for id := range m.authorized_social_platforms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGameAccountBindings:
		ids := make([]ent.Value, 0, len(m.game_account_bindings))
		for id := range m.game_account_bindings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedauthorized_social_platforms != nil {
		edges = append(edges, user.EdgeAuthorizedSocialPlatforms)
	}
	if m.removedgame_account_bindings != nil {
		edges = append(edges, user.EdgeGameAccountBindings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAuthorizedSocialPlatforms:
		ids := make([]ent.Value, 0, len(m.removedauthorized_social_platforms))
		for id := range m.removedauthorized_social_platforms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGameAccountBindings:
		ids := make([]ent.Value, 0, len(m.removedgame_account_bindings))
		for id := range m.removedgame_account_bindings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedemail_info {
		edges = append(edges, user.EdgeEmailInfo)
	}
	if m.clearedsocial_platform_info {
		edges = append(edges, user.EdgeSocialPlatformInfo)
	}
	if m.clearedauthorized_social_platforms {
		edges = append(edges, user.EdgeAuthorizedSocialPlatforms)
	}
	if m.clearedgame_account_bindings {
		edges = append(edges, user.EdgeGameAccountBindings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeEmailInfo:
		return m.clearedemail_info
	case user.EdgeSocialPlatformInfo:
		return m.clearedsocial_platform_info
	case user.EdgeAuthorizedSocialPlatforms:
		return m.clearedauthorized_social_platforms
	case user.EdgeGameAccountBindings:
		return m.clearedgame_account_bindings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeEmailInfo:
		m.ClearEmailInfo()
		return nil
	case user.EdgeSocialPlatformInfo:
		m.ClearSocialPlatformInfo()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeEmailInfo:
		m.ResetEmailInfo()
		return nil
	case user.EdgeSocialPlatformInfo:
		m.ResetSocialPlatformInfo()
		return nil
	case user.EdgeAuthorizedSocialPlatforms:
		m.ResetAuthorizedSocialPlatforms()
		return nil
	case user.EdgeGameAccountBindings:
		m.ResetGameAccountBindings()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
