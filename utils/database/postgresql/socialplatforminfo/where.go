// Code generated by ent, DO NOT EDIT.

package socialplatforminfo

import (
	"haruki-suite/utils/database/postgresql/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldLTE(FieldID, id))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEQ(FieldPlatform, v))
}

// PlatformUserID applies equality check predicate on the "platform_user_id" field. It's identical to PlatformUserIDEQ.
func PlatformUserID(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEQ(FieldPlatformUserID, v))
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEQ(FieldVerified, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldContainsFold(FieldPlatform, v))
}

// PlatformUserIDEQ applies the EQ predicate on the "platform_user_id" field.
func PlatformUserIDEQ(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEQ(FieldPlatformUserID, v))
}

// PlatformUserIDNEQ applies the NEQ predicate on the "platform_user_id" field.
func PlatformUserIDNEQ(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldNEQ(FieldPlatformUserID, v))
}

// PlatformUserIDIn applies the In predicate on the "platform_user_id" field.
func PlatformUserIDIn(vs ...string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldIn(FieldPlatformUserID, vs...))
}

// PlatformUserIDNotIn applies the NotIn predicate on the "platform_user_id" field.
func PlatformUserIDNotIn(vs ...string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldNotIn(FieldPlatformUserID, vs...))
}

// PlatformUserIDGT applies the GT predicate on the "platform_user_id" field.
func PlatformUserIDGT(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldGT(FieldPlatformUserID, v))
}

// PlatformUserIDGTE applies the GTE predicate on the "platform_user_id" field.
func PlatformUserIDGTE(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldGTE(FieldPlatformUserID, v))
}

// PlatformUserIDLT applies the LT predicate on the "platform_user_id" field.
func PlatformUserIDLT(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldLT(FieldPlatformUserID, v))
}

// PlatformUserIDLTE applies the LTE predicate on the "platform_user_id" field.
func PlatformUserIDLTE(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldLTE(FieldPlatformUserID, v))
}

// PlatformUserIDContains applies the Contains predicate on the "platform_user_id" field.
func PlatformUserIDContains(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldContains(FieldPlatformUserID, v))
}

// PlatformUserIDHasPrefix applies the HasPrefix predicate on the "platform_user_id" field.
func PlatformUserIDHasPrefix(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldHasPrefix(FieldPlatformUserID, v))
}

// PlatformUserIDHasSuffix applies the HasSuffix predicate on the "platform_user_id" field.
func PlatformUserIDHasSuffix(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldHasSuffix(FieldPlatformUserID, v))
}

// PlatformUserIDEqualFold applies the EqualFold predicate on the "platform_user_id" field.
func PlatformUserIDEqualFold(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEqualFold(FieldPlatformUserID, v))
}

// PlatformUserIDContainsFold applies the ContainsFold predicate on the "platform_user_id" field.
func PlatformUserIDContainsFold(v string) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldContainsFold(FieldPlatformUserID, v))
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldEQ(FieldVerified, v))
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.FieldNEQ(FieldVerified, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SocialPlatformInfo) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SocialPlatformInfo) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SocialPlatformInfo) predicate.SocialPlatformInfo {
	return predicate.SocialPlatformInfo(sql.NotPredicates(p))
}
