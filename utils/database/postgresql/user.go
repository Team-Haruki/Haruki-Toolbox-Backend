// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"fmt"
	"haruki-suite/utils/database/postgresql/emailinfo"
	"haruki-suite/utils/database/postgresql/socialplatforminfo"
	"haruki-suite/utils/database/postgresql/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// AvatarPath holds the value of the "avatar_path" field.
	AvatarPath *string `json:"avatar_path,omitempty"`
	// AllowCnMysekai holds the value of the "allow_cn_mysekai" field.
	AllowCnMysekai bool `json:"allow_cn_mysekai,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// EmailInfo holds the value of the email_info edge.
	EmailInfo *EmailInfo `json:"email_info,omitempty"`
	// SocialPlatformInfo holds the value of the social_platform_info edge.
	SocialPlatformInfo *SocialPlatformInfo `json:"social_platform_info,omitempty"`
	// AuthorizedSocialPlatforms holds the value of the authorized_social_platforms edge.
	AuthorizedSocialPlatforms []*AuthorizeSocialPlatformInfo `json:"authorized_social_platforms,omitempty"`
	// GameAccountBindings holds the value of the game_account_bindings edge.
	GameAccountBindings []*GameAccountBinding `json:"game_account_bindings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EmailInfoOrErr returns the EmailInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EmailInfoOrErr() (*EmailInfo, error) {
	if e.EmailInfo != nil {
		return e.EmailInfo, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: emailinfo.Label}
	}
	return nil, &NotLoadedError{edge: "email_info"}
}

// SocialPlatformInfoOrErr returns the SocialPlatformInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SocialPlatformInfoOrErr() (*SocialPlatformInfo, error) {
	if e.SocialPlatformInfo != nil {
		return e.SocialPlatformInfo, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: socialplatforminfo.Label}
	}
	return nil, &NotLoadedError{edge: "social_platform_info"}
}

// AuthorizedSocialPlatformsOrErr returns the AuthorizedSocialPlatforms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AuthorizedSocialPlatformsOrErr() ([]*AuthorizeSocialPlatformInfo, error) {
	if e.loadedTypes[2] {
		return e.AuthorizedSocialPlatforms, nil
	}
	return nil, &NotLoadedError{edge: "authorized_social_platforms"}
}

// GameAccountBindingsOrErr returns the GameAccountBindings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GameAccountBindingsOrErr() ([]*GameAccountBinding, error) {
	if e.loadedTypes[3] {
		return e.GameAccountBindings, nil
	}
	return nil, &NotLoadedError{edge: "game_account_bindings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAllowCnMysekai:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldName, user.FieldEmail, user.FieldPasswordHash, user.FieldAvatarPath:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				_m.PasswordHash = value.String
			}
		case user.FieldAvatarPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_path", values[i])
			} else if value.Valid {
				_m.AvatarPath = new(string)
				*_m.AvatarPath = value.String
			}
		case user.FieldAllowCnMysekai:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_cn_mysekai", values[i])
			} else if value.Valid {
				_m.AllowCnMysekai = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEmailInfo queries the "email_info" edge of the User entity.
func (_m *User) QueryEmailInfo() *EmailInfoQuery {
	return NewUserClient(_m.config).QueryEmailInfo(_m)
}

// QuerySocialPlatformInfo queries the "social_platform_info" edge of the User entity.
func (_m *User) QuerySocialPlatformInfo() *SocialPlatformInfoQuery {
	return NewUserClient(_m.config).QuerySocialPlatformInfo(_m)
}

// QueryAuthorizedSocialPlatforms queries the "authorized_social_platforms" edge of the User entity.
func (_m *User) QueryAuthorizedSocialPlatforms() *AuthorizeSocialPlatformInfoQuery {
	return NewUserClient(_m.config).QueryAuthorizedSocialPlatforms(_m)
}

// QueryGameAccountBindings queries the "game_account_bindings" edge of the User entity.
func (_m *User) QueryGameAccountBindings() *GameAccountBindingQuery {
	return NewUserClient(_m.config).QueryGameAccountBindings(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("postgresql: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(_m.PasswordHash)
	builder.WriteString(", ")
	if v := _m.AvatarPath; v != nil {
		builder.WriteString("avatar_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("allow_cn_mysekai=")
	builder.WriteString(fmt.Sprintf("%v", _m.AllowCnMysekai))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
