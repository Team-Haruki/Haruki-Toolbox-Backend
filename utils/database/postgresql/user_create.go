// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"context"
	"errors"
	"fmt"
	"haruki-suite/utils/database/postgresql/authorizesocialplatforminfo"
	"haruki-suite/utils/database/postgresql/emailinfo"
	"haruki-suite/utils/database/postgresql/gameaccountbinding"
	"haruki-suite/utils/database/postgresql/socialplatforminfo"
	"haruki-suite/utils/database/postgresql/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *UserCreate) SetName(v string) *UserCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetPasswordHash sets the "password_hash" field.
func (_c *UserCreate) SetPasswordHash(v string) *UserCreate {
	_c.mutation.SetPasswordHash(v)
	return _c
}

// SetAvatarPath sets the "avatar_path" field.
func (_c *UserCreate) SetAvatarPath(v string) *UserCreate {
	_c.mutation.SetAvatarPath(v)
	return _c
}

// SetNillableAvatarPath sets the "avatar_path" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatarPath(v *string) *UserCreate {
	if v != nil {
		_c.SetAvatarPath(*v)
	}
	return _c
}

// SetAllowCnMysekai sets the "allow_cn_mysekai" field.
func (_c *UserCreate) SetAllowCnMysekai(v bool) *UserCreate {
	_c.mutation.SetAllowCnMysekai(v)
	return _c
}

// SetNillableAllowCnMysekai sets the "allow_cn_mysekai" field if the given value is not nil.
func (_c *UserCreate) SetNillableAllowCnMysekai(v *bool) *UserCreate {
	if v != nil {
		_c.SetAllowCnMysekai(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *UserCreate) SetID(v string) *UserCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetEmailInfoID sets the "email_info" edge to the EmailInfo entity by ID.
func (_c *UserCreate) SetEmailInfoID(id int) *UserCreate {
	_c.mutation.SetEmailInfoID(id)
	return _c
}

// SetNillableEmailInfoID sets the "email_info" edge to the EmailInfo entity by ID if the given value is not nil.
func (_c *UserCreate) SetNillableEmailInfoID(id *int) *UserCreate {
	if id != nil {
		_c = _c.SetEmailInfoID(*id)
	}
	return _c
}

// SetEmailInfo sets the "email_info" edge to the EmailInfo entity.
func (_c *UserCreate) SetEmailInfo(v *EmailInfo) *UserCreate {
	return _c.SetEmailInfoID(v.ID)
}

// SetSocialPlatformInfoID sets the "social_platform_info" edge to the SocialPlatformInfo entity by ID.
func (_c *UserCreate) SetSocialPlatformInfoID(id int) *UserCreate {
	_c.mutation.SetSocialPlatformInfoID(id)
	return _c
}

// SetNillableSocialPlatformInfoID sets the "social_platform_info" edge to the SocialPlatformInfo entity by ID if the given value is not nil.
func (_c *UserCreate) SetNillableSocialPlatformInfoID(id *int) *UserCreate {
	if id != nil {
		_c = _c.SetSocialPlatformInfoID(*id)
	}
	return _c
}

// SetSocialPlatformInfo sets the "social_platform_info" edge to the SocialPlatformInfo entity.
func (_c *UserCreate) SetSocialPlatformInfo(v *SocialPlatformInfo) *UserCreate {
	return _c.SetSocialPlatformInfoID(v.ID)
}

// AddAuthorizedSocialPlatformIDs adds the "authorized_social_platforms" edge to the AuthorizeSocialPlatformInfo entity by IDs.
func (_c *UserCreate) AddAuthorizedSocialPlatformIDs(ids ...int) *UserCreate {
	_c.mutation.AddAuthorizedSocialPlatformIDs(ids...)
	return _c
}

// AddAuthorizedSocialPlatforms adds the "authorized_social_platforms" edges to the AuthorizeSocialPlatformInfo entity.
func (_c *UserCreate) AddAuthorizedSocialPlatforms(v ...*AuthorizeSocialPlatformInfo) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAuthorizedSocialPlatformIDs(ids...)
}

// AddGameAccountBindingIDs adds the "game_account_bindings" edge to the GameAccountBinding entity by IDs.
func (_c *UserCreate) AddGameAccountBindingIDs(ids ...int) *UserCreate {
	_c.mutation.AddGameAccountBindingIDs(ids...)
	return _c
}

// AddGameAccountBindings adds the "game_account_bindings" edges to the GameAccountBinding entity.
func (_c *UserCreate) AddGameAccountBindings(v ...*GameAccountBinding) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGameAccountBindingIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.AllowCnMysekai(); !ok {
		v := user.DefaultAllowCnMysekai
		_c.mutation.SetAllowCnMysekai(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`postgresql: missing required field "User.name"`)}
	}
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`postgresql: missing required field "User.email"`)}
	}
	if _, ok := _c.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`postgresql: missing required field "User.password_hash"`)}
	}
	if _, ok := _c.mutation.AllowCnMysekai(); !ok {
		return &ValidationError{Name: "allow_cn_mysekai", err: errors.New(`postgresql: missing required field "User.allow_cn_mysekai"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := user.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`postgresql: validator failed for field "User.id": %w`, err)}
		}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected User.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := _c.mutation.AvatarPath(); ok {
		_spec.SetField(user.FieldAvatarPath, field.TypeString, value)
		_node.AvatarPath = &value
	}
	if value, ok := _c.mutation.AllowCnMysekai(); ok {
		_spec.SetField(user.FieldAllowCnMysekai, field.TypeBool, value)
		_node.AllowCnMysekai = value
	}
	if nodes := _c.mutation.EmailInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmailInfoTable,
			Columns: []string{user.EmailInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SocialPlatformInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SocialPlatformInfoTable,
			Columns: []string{user.SocialPlatformInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(socialplatforminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AuthorizedSocialPlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthorizedSocialPlatformsTable,
			Columns: []string{user.AuthorizedSocialPlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizesocialplatforminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GameAccountBindingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GameAccountBindingsTable,
			Columns: []string{user.GameAccountBindingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameaccountbinding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
