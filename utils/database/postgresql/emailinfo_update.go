// Code generated by ent, DO NOT EDIT.

package postgresql

import (
	"context"
	"errors"
	"fmt"
	"haruki-suite/utils/database/postgresql/emailinfo"
	"haruki-suite/utils/database/postgresql/predicate"
	"haruki-suite/utils/database/postgresql/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmailInfoUpdate is the builder for updating EmailInfo entities.
type EmailInfoUpdate struct {
	config
	hooks    []Hook
	mutation *EmailInfoMutation
}

// Where appends a list predicates to the EmailInfoUpdate builder.
func (_u *EmailInfoUpdate) Where(ps ...predicate.EmailInfo) *EmailInfoUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEmail sets the "email" field.
func (_u *EmailInfoUpdate) SetEmail(v string) *EmailInfoUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *EmailInfoUpdate) SetNillableEmail(v *string) *EmailInfoUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetVerified sets the "verified" field.
func (_u *EmailInfoUpdate) SetVerified(v bool) *EmailInfoUpdate {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *EmailInfoUpdate) SetNillableVerified(v *bool) *EmailInfoUpdate {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *EmailInfoUpdate) SetUserID(id string) *EmailInfoUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *EmailInfoUpdate) SetNillableUserID(id *string) *EmailInfoUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *EmailInfoUpdate) SetUser(v *User) *EmailInfoUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the EmailInfoMutation object of the builder.
func (_u *EmailInfoUpdate) Mutation() *EmailInfoMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *EmailInfoUpdate) ClearUser() *EmailInfoUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EmailInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EmailInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EmailInfoUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EmailInfoUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *EmailInfoUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(emailinfo.Table, emailinfo.Columns, sqlgraph.NewFieldSpec(emailinfo.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(emailinfo.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(emailinfo.FieldVerified, field.TypeBool, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailinfo.UserTable,
			Columns: []string{emailinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailinfo.UserTable,
			Columns: []string{emailinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EmailInfoUpdateOne is the builder for updating a single EmailInfo entity.
type EmailInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailInfoMutation
}

// SetEmail sets the "email" field.
func (_u *EmailInfoUpdateOne) SetEmail(v string) *EmailInfoUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *EmailInfoUpdateOne) SetNillableEmail(v *string) *EmailInfoUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetVerified sets the "verified" field.
func (_u *EmailInfoUpdateOne) SetVerified(v bool) *EmailInfoUpdateOne {
	_u.mutation.SetVerified(v)
	return _u
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (_u *EmailInfoUpdateOne) SetNillableVerified(v *bool) *EmailInfoUpdateOne {
	if v != nil {
		_u.SetVerified(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *EmailInfoUpdateOne) SetUserID(id string) *EmailInfoUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *EmailInfoUpdateOne) SetNillableUserID(id *string) *EmailInfoUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *EmailInfoUpdateOne) SetUser(v *User) *EmailInfoUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the EmailInfoMutation object of the builder.
func (_u *EmailInfoUpdateOne) Mutation() *EmailInfoMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *EmailInfoUpdateOne) ClearUser() *EmailInfoUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the EmailInfoUpdate builder.
func (_u *EmailInfoUpdateOne) Where(ps ...predicate.EmailInfo) *EmailInfoUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EmailInfoUpdateOne) Select(field string, fields ...string) *EmailInfoUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated EmailInfo entity.
func (_u *EmailInfoUpdateOne) Save(ctx context.Context) (*EmailInfo, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EmailInfoUpdateOne) SaveX(ctx context.Context) *EmailInfo {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EmailInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EmailInfoUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *EmailInfoUpdateOne) sqlSave(ctx context.Context) (_node *EmailInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(emailinfo.Table, emailinfo.Columns, sqlgraph.NewFieldSpec(emailinfo.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`postgresql: missing "EmailInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailinfo.FieldID)
		for _, f := range fields {
			if !emailinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("postgresql: invalid field %q for query", f)}
			}
			if f != emailinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(emailinfo.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Verified(); ok {
		_spec.SetField(emailinfo.FieldVerified, field.TypeBool, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailinfo.UserTable,
			Columns: []string{emailinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailinfo.UserTable,
			Columns: []string{emailinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmailInfo{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
