// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldAvatarPath holds the string denoting the avatar_path field in the database.
	FieldAvatarPath = "avatar_path"
	// FieldAllowCnMysekai holds the string denoting the allow_cn_mysekai field in the database.
	FieldAllowCnMysekai = "allow_cn_mysekai"
	// EdgeEmailInfo holds the string denoting the email_info edge name in mutations.
	EdgeEmailInfo = "email_info"
	// EdgeSocialPlatformInfo holds the string denoting the social_platform_info edge name in mutations.
	EdgeSocialPlatformInfo = "social_platform_info"
	// EdgeAuthorizedSocialPlatforms holds the string denoting the authorized_social_platforms edge name in mutations.
	EdgeAuthorizedSocialPlatforms = "authorized_social_platforms"
	// EdgeGameAccountBindings holds the string denoting the game_account_bindings edge name in mutations.
	EdgeGameAccountBindings = "game_account_bindings"
	// Table holds the table name of the user in the database.
	Table = "users"
	// EmailInfoTable is the table that holds the email_info relation/edge.
	EmailInfoTable = "email_infos"
	// EmailInfoInverseTable is the table name for the EmailInfo entity.
	// It exists in this package in order to avoid circular dependency with the "emailinfo" package.
	EmailInfoInverseTable = "email_infos"
	// EmailInfoColumn is the table column denoting the email_info relation/edge.
	EmailInfoColumn = "user_email_info"
	// SocialPlatformInfoTable is the table that holds the social_platform_info relation/edge.
	SocialPlatformInfoTable = "social_platform_infos"
	// SocialPlatformInfoInverseTable is the table name for the SocialPlatformInfo entity.
	// It exists in this package in order to avoid circular dependency with the "socialplatforminfo" package.
	SocialPlatformInfoInverseTable = "social_platform_infos"
	// SocialPlatformInfoColumn is the table column denoting the social_platform_info relation/edge.
	SocialPlatformInfoColumn = "user_social_platform_info"
	// AuthorizedSocialPlatformsTable is the table that holds the authorized_social_platforms relation/edge.
	AuthorizedSocialPlatformsTable = "authorize_social_platform_infos"
	// AuthorizedSocialPlatformsInverseTable is the table name for the AuthorizeSocialPlatformInfo entity.
	// It exists in this package in order to avoid circular dependency with the "authorizesocialplatforminfo" package.
	AuthorizedSocialPlatformsInverseTable = "authorize_social_platform_infos"
	// AuthorizedSocialPlatformsColumn is the table column denoting the authorized_social_platforms relation/edge.
	AuthorizedSocialPlatformsColumn = "user_id"
	// GameAccountBindingsTable is the table that holds the game_account_bindings relation/edge.
	GameAccountBindingsTable = "game_account_bindings"
	// GameAccountBindingsInverseTable is the table name for the GameAccountBinding entity.
	// It exists in this package in order to avoid circular dependency with the "gameaccountbinding" package.
	GameAccountBindingsInverseTable = "game_account_bindings"
	// GameAccountBindingsColumn is the table column denoting the game_account_bindings relation/edge.
	GameAccountBindingsColumn = "user_game_account_bindings"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPasswordHash,
	FieldAvatarPath,
	FieldAllowCnMysekai,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAllowCnMysekai holds the default value on creation for the "allow_cn_mysekai" field.
	DefaultAllowCnMysekai bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByAvatarPath orders the results by the avatar_path field.
func ByAvatarPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarPath, opts...).ToFunc()
}

// ByAllowCnMysekai orders the results by the allow_cn_mysekai field.
func ByAllowCnMysekai(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowCnMysekai, opts...).ToFunc()
}

// ByEmailInfoField orders the results by email_info field.
func ByEmailInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailInfoStep(), sql.OrderByField(field, opts...))
	}
}

// BySocialPlatformInfoField orders the results by social_platform_info field.
func BySocialPlatformInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSocialPlatformInfoStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthorizedSocialPlatformsCount orders the results by authorized_social_platforms count.
func ByAuthorizedSocialPlatformsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthorizedSocialPlatformsStep(), opts...)
	}
}

// ByAuthorizedSocialPlatforms orders the results by authorized_social_platforms terms.
func ByAuthorizedSocialPlatforms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorizedSocialPlatformsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGameAccountBindingsCount orders the results by game_account_bindings count.
func ByGameAccountBindingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameAccountBindingsStep(), opts...)
	}
}

// ByGameAccountBindings orders the results by game_account_bindings terms.
func ByGameAccountBindings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameAccountBindingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEmailInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EmailInfoTable, EmailInfoColumn),
	)
}
func newSocialPlatformInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SocialPlatformInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SocialPlatformInfoTable, SocialPlatformInfoColumn),
	)
}
func newAuthorizedSocialPlatformsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorizedSocialPlatformsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuthorizedSocialPlatformsTable, AuthorizedSocialPlatformsColumn),
	)
}
func newGameAccountBindingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameAccountBindingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameAccountBindingsTable, GameAccountBindingsColumn),
	)
}
