// Code generated by ent, DO NOT EDIT.

package authorizesocialplatforminfo

import (
	"haruki-suite/utils/database/postgresql/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldUserID, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldPlatform, v))
}

// PlatformUserID applies equality check predicate on the "platform_user_id" field. It's identical to PlatformUserIDEQ.
func PlatformUserID(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldPlatformUserID, v))
}

// PlatformID applies equality check predicate on the "platform_id" field. It's identical to PlatformIDEQ.
func PlatformID(v int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldPlatformID, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldComment, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldContainsFold(FieldUserID, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldContainsFold(FieldPlatform, v))
}

// PlatformUserIDEQ applies the EQ predicate on the "platform_user_id" field.
func PlatformUserIDEQ(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldPlatformUserID, v))
}

// PlatformUserIDNEQ applies the NEQ predicate on the "platform_user_id" field.
func PlatformUserIDNEQ(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNEQ(FieldPlatformUserID, v))
}

// PlatformUserIDIn applies the In predicate on the "platform_user_id" field.
func PlatformUserIDIn(vs ...string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldIn(FieldPlatformUserID, vs...))
}

// PlatformUserIDNotIn applies the NotIn predicate on the "platform_user_id" field.
func PlatformUserIDNotIn(vs ...string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNotIn(FieldPlatformUserID, vs...))
}

// PlatformUserIDGT applies the GT predicate on the "platform_user_id" field.
func PlatformUserIDGT(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGT(FieldPlatformUserID, v))
}

// PlatformUserIDGTE applies the GTE predicate on the "platform_user_id" field.
func PlatformUserIDGTE(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGTE(FieldPlatformUserID, v))
}

// PlatformUserIDLT applies the LT predicate on the "platform_user_id" field.
func PlatformUserIDLT(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLT(FieldPlatformUserID, v))
}

// PlatformUserIDLTE applies the LTE predicate on the "platform_user_id" field.
func PlatformUserIDLTE(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLTE(FieldPlatformUserID, v))
}

// PlatformUserIDContains applies the Contains predicate on the "platform_user_id" field.
func PlatformUserIDContains(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldContains(FieldPlatformUserID, v))
}

// PlatformUserIDHasPrefix applies the HasPrefix predicate on the "platform_user_id" field.
func PlatformUserIDHasPrefix(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldHasPrefix(FieldPlatformUserID, v))
}

// PlatformUserIDHasSuffix applies the HasSuffix predicate on the "platform_user_id" field.
func PlatformUserIDHasSuffix(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldHasSuffix(FieldPlatformUserID, v))
}

// PlatformUserIDEqualFold applies the EqualFold predicate on the "platform_user_id" field.
func PlatformUserIDEqualFold(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEqualFold(FieldPlatformUserID, v))
}

// PlatformUserIDContainsFold applies the ContainsFold predicate on the "platform_user_id" field.
func PlatformUserIDContainsFold(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldContainsFold(FieldPlatformUserID, v))
}

// PlatformIDEQ applies the EQ predicate on the "platform_id" field.
func PlatformIDEQ(v int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldPlatformID, v))
}

// PlatformIDNEQ applies the NEQ predicate on the "platform_id" field.
func PlatformIDNEQ(v int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNEQ(FieldPlatformID, v))
}

// PlatformIDIn applies the In predicate on the "platform_id" field.
func PlatformIDIn(vs ...int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldIn(FieldPlatformID, vs...))
}

// PlatformIDNotIn applies the NotIn predicate on the "platform_id" field.
func PlatformIDNotIn(vs ...int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNotIn(FieldPlatformID, vs...))
}

// PlatformIDGT applies the GT predicate on the "platform_id" field.
func PlatformIDGT(v int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGT(FieldPlatformID, v))
}

// PlatformIDGTE applies the GTE predicate on the "platform_id" field.
func PlatformIDGTE(v int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGTE(FieldPlatformID, v))
}

// PlatformIDLT applies the LT predicate on the "platform_id" field.
func PlatformIDLT(v int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLT(FieldPlatformID, v))
}

// PlatformIDLTE applies the LTE predicate on the "platform_id" field.
func PlatformIDLTE(v int) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLTE(FieldPlatformID, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.FieldContainsFold(FieldComment, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthorizeSocialPlatformInfo) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthorizeSocialPlatformInfo) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthorizeSocialPlatformInfo) predicate.AuthorizeSocialPlatformInfo {
	return predicate.AuthorizeSocialPlatformInfo(sql.NotPredicates(p))
}
